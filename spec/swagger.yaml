swagger: '2.0'
host: api.payping.ir
info:
    version: 'v1'
    title: 'سرویس‌های پلتفرم مالی پی‌پینگ'
    x-logo:
        url: 'https://cdn.payping.ir/statics/logo.png'
    description: "# مستندات سرویس‌های عمومی پلت‌فرم مالی پی‌پینگ\n\n لینک‌های پشتیبانی: تلگرام: [t.me/payping](t.me/payping) | ایمیل: [info@payping.ir]() | تلفن: 02175038797\n # مقدمه\n\n تمامی وب‌ سرویس‌های توضیح داده شده در این مستندات به صورت [RESTful](https://en.wikipedia.org/wiki/Representational_state_transfer) هستند و طبق همین چهارچوب باید با آنها ارتباط برقرار کرد.   توضیحات تکمیلی‌تر هر سرویس در آدرس زیر به صورت کامل قرار داده شده است. \n جهت رفع هرگونه مشکل و یا پرسش با پشتیبانی در تماس باشید.\n\n [راهنمای تکمیلی وب‌سرویس‌ها](https://www.payping.io/help/fa/category/api--qspohi/) \n\n # POSTMAN\n برای راحتی کار، فایل postman سرویس ها برای شما آماده شده است که می توانید از لینک زیر روند استفاده از آن را مطالعه بفرمایین و قالب مربوطه را دانلود نمایید.\n \n [راهنمای postman](https://www.payping.io/help/fa/postman/)\n\n # توضیحات تکمیلی برای تمام سرویس‌ها\n\n برای فراخوانی سرویس‌های صفحه‌بندی (pagination) اگر پارامتر ورودی ارسال نشود، حداکثر ۱۰ آیتم نمایش داده می‌شود و همچنین حداکثر تعداد دریافت آیتم به ازای هر درخواست ۵۰ عدد می‌باشد و بیشتر از آن را سرویس پشتیبانی نمی‌کند و در صورت نیاز به بارگزاری تمام آیتم‌های یک سرویس به صورت یکجا با ایمیل به بخش پشتیبانی در تماس باشید. همینطور توجه داشته باشین واحد پول در تمام سرویس‌ها تومان می‌باشد و منطقه زمانی تمامی‌ تاریخ و ساعت‌ها برابر با ساعت جهانی یا UTC می‌باشد.\n\n # نکاتی برای آپلود فایل‌ها\n\n برای آپلود هرگونه فایل اعم از عکس پروفایل کاربران و یا گزارشات پرداخت‌ها و ... می‌بایست که از [سرویس بارگذاری فایل](#tag/Upload) استفاده کنید.\n \n پس از انجام عملیات آپلود توسط سرویس بارگذاری فایل، تنها کافیست نام فایل آپلود شده که در خروجی سرویس به شما برگردانده می‌شود را ذخیره نمایید.\n\n # جدول کدهای دریافتی از هر سرویس\n\n بعد از ارسال هر درخواست به سمت سرور، از سمت ما طبق قواعد وب‌سرویس‌های RESTful یک کدی به شما بازگرداننده می‌شود.\n هر کد معنایی دارد که در جدول زیر توضیحات مربوطه را می‌بینید\n\n |شماره کد|توضیحات|\n |-------|--------|\n |`200`| عملیات با موفقیت انجام شد |\n |`400`| مشکلی در ارسال درخواست وجود دارد |\n |`500`| مشکلی در سرور رخ داده است |\n |`503`| سرور در حال حاضر قادر به پاسخگویی نمی‌باشد |\n |`401`| عدم دسترسی|\n |`403`| دسترسی غیر مجاز |\n |`404`| آیتم درخواستی مورد نظر موجود نمی‌باشد |\n\n"
    termsOfService: None
tags:
    -
        name: product
        description: 'سرویس‌های عمومی بخش آیتم‌های مالی، لینک ثابت و سرویس‌های مربوط به پروسه پرداخت آنها'
    -
        name: coupon
        description: 'سرویس‌های عمومی بخش کدهای تخفیف'
    -
        name: Upload
        description: 'متدهای مرتبط با [آپلود فایل‌ها](#section/) ورودی تمام این سرویس‌ها به صورت formData می‌باشد.'
    -
        name: Customer
        description: 'در این بخش میتوانید مشتریان خود را به صورت یک دفترچه سنتی مدیریت و در زمان صدور فاکتور از این لیست استفاده کنید.'
    -
        name: Invoice
        description: 'در این بخش میتوانید فاکتور های ساده و زمانبندی شده بسازید و با انتخاب یک یا چند مشتری و حتی پست الکترونیک برای آنها فاکتور را ارسال کنید تا نسبت به پرداخت آن اقدام کنند.'
    -
        name: Template
        description: 'در این بخش میتوانید قالب های آماده ای از فاکتور بسازید و در زمان ساخت فاکتور دیگر نیازی به تکمیل همه ی گزینه های فاکتور ندارید و فقط با انتخاب قالب فاکتور سریعتر فاکتور بسازید.'
    -
        name: Payment
        description: 'متدهای مرتبط با تراکنش‌های مالی که شامل پرداخت پول، پرداخت تسهیمی و تمام فرآیندهای تایید یک تراکنش می‌باشد.'
    -
        name: Report
        description: 'متدهای مرتبط با گزارش تراکنش‌های درخواست و یا پرداخت پول.'
    -
        name: Request
        description: 'متدهای مرتبط با درخواست پول از دیگران به صورتیکه برای آنها یک لینک پرداخت به صورت ایمیل و یا پیامک ارسال می‌شود.'
    -
        name: Withdraw
        description: 'متدهای مرتبط با درخواست تسویه حساب.'
    -
        name: Pos
        description: 'به کمک این متد می توانید یک درخواست تسویه با مبلغ دلخواه ایجاد نمایید'
x-tagGroups:
    -
        name: 'سرویس پرداخت'
        tags:
            - Payment
            - Request
            - Withdraw
            - Report
            - Pos
    -
        name: 'سرویس مشتری'
        tags:
            - Customer
    -
        name: 'سرویس آیتم‌های مالی'
        tags:
            - product
            - permaLink
            - coupon
    -
        name: 'سرویس فاکتور'
        tags:
            - Invoice
            - Template
    -
        name: 'سرویس آپلود فایل'
        tags:
            - Upload
paths:
    /v1/pay:
        post:
            tags: [Payment]
            summary: 'ساخت پرداخت'
            description: "به کمک این متد می توانید برای یک نفر کد پرداخت ایجاد کنید.\r\n\n"
            operationId: PaymentCreatePayment
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات پرداخت', required: false, schema: {$ref: '#/definitions/CreatePaymentViewModel'}}]
            responses: {'200': {description: 'پرداخت پول جدید با موفقیت ساخته شد', schema: {$ref: '#/definitions/PaymentResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
            x-code-samples:
                - lang: 'C#'
                  source: |
                    var client = new RestClient("https://api.payping.ir/v1/pay");
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("authorization", "Bearer xxxxxxxxxxxxxxxxxxxxx");
                    request.AddHeader("content-type", "application/json");
                    request.AddHeader("accept", "application/json");
                    var model = new
                    {
                        Amount = 100,
                        PayerIdentity = "string",
                        PayerName = "string",
                        Description = "string",
                        ReturnUrl = "string",
                        ClientRefId = "string"
                    };
                    request.AddJsonBody(model);
                    IRestResponse response = client.Execute(request);
                - lang: PHP
                  source: |
                    <?php

                    $request = new HttpRequest();
                    $request->setUrl('https://api.payping.ir/v1/pay');
                    $request->setMethod(HTTP_METH_POST);

                    $request->setHeaders(array(
                      'authorization' => 'Bearer xxxxxxxxxxxxxxxxxxxxxxxxx',
                      'content-type' => 'application/json',
                      'accept' => 'application/json'
                    ));

                    $request->setBody('{
                      "payerName": "string",
                      "amount": 100,
                      "payerIdentity": "string",
                      "returnUrl": "Uri Format For Exam: (http(s)://payping.ir)",
                      "description": "string",
                      "clientRefId": "string"
                    }');

                    try {
                      $response = $request->send();

                      echo $response->getBody();
                    } catch (HttpException $ex) {
                      echo $ex;
                    }
                - lang: Java
                  source: |
                    OkHttpClient client = new OkHttpClient();
                    
                    MediaType mediaType = MediaType.parse("application/json");
                    RequestBody body = RequestBody.create(mediaType, "{\r\n  \"payerName\": \"string\",\r\n  \"amount\": 100,\r\n  \"payerIdentity\": \"string\",\r\n  \"returnUrl\": \"Uri Format For Exam: (http(s)://payping.ir)\",\r\n  \"description\": \"string\",\r\n  \"clientRefId\": \"string\"\r\n}");
                    Request request = new Request.Builder()
                      .url("https://api.payping.ir/v1/pay")
                      .post(body)
                      .addHeader("accept", "application/json")
                      .addHeader("content-type", "application/json")
                      .addHeader("authorization", "Bearer xxxxxxxxxxxxxxxxxx")
                      .build();
                    
                    Response response = client.newCall(request).execute();
                - lang: NodeJs
                  source: |
                    var request = require("request");

                    var options = { method: 'POST',
                      url: 'https://api.payping.ir/v1/pay',
                      headers: 
                       { authorization: 'Bearer xxxxxxxxxxxxxxxx',
                         'content-type': 'application/json',
                         accept: 'application/json' },
                      body: 
                       { payerName: 'string',
                         amount: 100,
                         payerIdentity: 'string',
                         returnUrl: 'Uri Format For Exam: (http(s)://payping.ir)',
                         description: 'string',
                         clientRefId: 'string' },
                      json: true };

                    request(options, function (error, response, body) {
                      if (error) throw new Error(error);

                      console.log(body);
                    });
                - lang: Python
                  source: |
                    import http.client

                    conn = http.client.HTTPConnection("")

                    payload = "{\r\n  \"payerName\": \"string\",\r\n  \"amount\": 100,\r\n  \"payerIdentity\": \"string\",\r\n  \"returnUrl\": \"Uri Format For Exam: (http(s)://payping.ir)\",\r\n  \"description\": \"string\",\r\n  \"clientRefId\": \"string\"\r\n}"

                    headers = {
                        'accept': "application/json",
                        'content-type': "application/json",
                        'authorization': "Bearer xxxxxxxxxxxxxx"
                        }

                    conn.request("POST", "https://api.payping.ir/v1/pay", payload, headers)

                    res = conn.getresponse()
                    data = res.read()

                    print(data.decode("utf-8"))
                - lang: Jquery
                  source: |
                    var settings = {
                      "async": true,
                      "crossDomain": true,
                      "url": "https://api.payping.ir/v1/pay",
                      "method": "POST",
                      "headers": {
                        "accept": "application/json",
                        "content-type": "application/json",
                        "authorization": "Bearer xxxxxxxxxxxxxxxx"
                      },
                      "processData": false,
                      "data": "{\r\n  \"payerName\": \"string\",\r\n  \"amount\": 100,\r\n  \"payerIdentity\": \"string\",\r\n  \"returnUrl\": \"Uri Format For Exam: (http(s)://payping.ir)\",\r\n  \"description\": \"string\",\r\n  \"clientRefId\": \"string\"\r\n}"
                    }

                    $.ajax(settings).done(function (response) {
                      console.log(response);
                    });
                - lang: Go
                  source: |
                    package main

                    import (
                    	"fmt"
                    	"strings"
                    	"net/http"
                    	"io/ioutil"
                    )

                    func main() {
                    
                    	url := "https://api.payping.ir/v1/pay"

                    	payload := strings.NewReader("{\r\n  \"payerName\": \"string\",\r\n  \"amount\": 100,\r\n  \"payerIdentity\": \"string\",\r\n  \"returnUrl\": \"Uri Format For Exam: (http(s)://payping.ir)\",\r\n  \"description\": \"string\",\r\n  \"clientRefId\": \"string\"\r\n}")

                    	req, _ := http.NewRequest("POST", url, payload)

                    	req.Header.Add("accept", "application/json")
                    	req.Header.Add("content-type", "application/json")
                    	req.Header.Add("authorization", "Bearer xxxxxxxxxxxx")

                    	res, _ := http.DefaultClient.Do(req)

                    	defer res.Body.Close()
                    	body, _ := ioutil.ReadAll(res.Body)

                    	fmt.Println(res)
                    	fmt.Println(string(body))

                    }
    /v1/pay/BlockMoney:
        post:
            tags: [Payment]
            summary: 'ساخت پرداخت مسدود شده'
            description: "به کمک این متد می توانید برای یک نفر پرداخت تضمینی ایجاد کنید.\r\n\n"
            operationId: PaymentBlockMoney
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات پرداخت', required: false, schema: {$ref: '#/definitions/CreateMultiPaymentViewModel'}}]
            responses: {'200': {description: 'پرداخت پول جدید با موفقیت ساخته شد', schema: {$ref: '#/definitions/PaymentResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    /v1/pay/UnBlockMoney:
        post:
            tags: [Payment]
            summary: 'آزاد سازی پول مسدود شده'
            description: ""
            operationId: PaymentUnBlockMoney
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات پرداخت', required: false, schema: {$ref: '#/definitions/UnBlockMoneyViewModel'}}]
            responses: {'200': {description: 'پرداخت پول جدید با موفقیت ساخته شد', schema: {$ref: '#/definitions/PaymentResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    /v1/pay/Multi:
        post:
            tags: [Payment]
            summary: 'ساخت پرداخت تسهیمی'
            description: ""
            operationId: PaymentCreateMultiPayment
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات پرداخت', required: false, schema: {$ref: '#/definitions/CreateMultiPaymentViewModel'}}]
            responses: {'200': {description: 'پرداخت پول جدید با موفقیت ساخته شد', schema: {$ref: '#/definitions/PaymentResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    /v1/pay/verify:
        post:
            tags: [Payment]
            summary: 'تایید پرداخت'
            description: ""
            operationId: PaymentVerifyPayment
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات پرداخت', required: false, schema: {$ref: '#/definitions/VerifyPaymentViewModel'}}]
            responses: {'200': {description: 'تاییدیه آیتم مالی با موفقیت انجام شد'}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
            x-code-samples:
                - lang: 'C#'
                  source: |
                    var client = new RestClient("https://api.payping.ir/v1/pay/verify");
                    var request = new RestRequest(Method.POST);
                    request.AddHeader("authorization", "Bearer xxxxxxxxxxxxxxxxxxxx");
                    request.AddHeader("content-type", "application/json");
                    request.AddHeader("accept", "application/json");
                    var model = new {
                        RefId = "string",
                        Amount = 100
                    }
                    request.AddJsonBody(model);
                    IRestResponse response = client.Execute(request);
                - lang: PHP
                  source: |
                    <?php

                    $request = new HttpRequest();
                    $request->setUrl('https://api.payping.ir/v1/pay/verify');
                    $request->setMethod(HTTP_METH_POST);

                    $request->setHeaders(array(
                    'authorization' => 'Bearer xxxxxxxxxxxxxxxxxxxxx',
                    'content-type' => 'application/json',
                    'accept' => 'application/json'
                    ));

                    $request->setBody('{
                    "refId": "string",
                    "amount": 100
                    }');

                    try {
                    $response = $request->send();

                    echo $response->getBody();
                    } catch (HttpException $ex) {
                    echo $ex;
                    }
                - lang: Jquery
                  source: |
                    var settings = {
                    "async": true,
                    "crossDomain": true,
                    "url": "https://api.payping.ir/v1/pay/verify",
                    "method": "POST",
                    "headers": {
                        "accept": "application/json",
                        "content-type": "application/json",
                        "authorization": "Bearer xxxxxxxxxxxxxxxx"
                    },
                    "processData": false,
                    "data": "{\r\n  \"refId\": \"string\",\r\n  \"amount\": 100\r\n}"
                    }

                    $.ajax(settings).done(function (response) {
                    console.log(response);
                    });
                - lang: Python
                  source: |
                    import http.client

                    conn = http.client.HTTPConnection("")

                    payload = "{\r\n  \"refId\": \"string\",\r\n  \"amount\": 100\r\n}"

                    headers = {
                        'accept': "application/json",
                        'content-type': "application/json",
                        'authorization': "Bearer xxxxxxxxxxxxxxxxxx"
                        }

                    conn.request("POST", "https://api.payping.ir/v1/pay/verify", payload, headers)

                    res = conn.getresponse()
                    data = res.read()

                    print(data.decode("utf-8"))
    '/v1/pay/{code}':
        delete:
            tags: [Payment]
            summary: 'برای لغو کردن یک کد پرداخت می توانید از این متد استفاده کنید'
            operationId: PaymentCancelPayment
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد پرداخت', required: true, type: string}]
            responses: {'200': {description: 'عملیات لغو با موفقیت انجام شد'}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    /v1/pos:
        post:
            tags: [Pos]
            summary: 'ساخت پرداخت شناسه دار'
            description: 'از این متد می تواند برای ساخت یک پرادخت شناسه دار که به کمک دستگاه Pos پرداخت آن انجام می شود، استفاده کرد'
            operationId: PosCreatePayment
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات پرداخت', required: false, schema: {$ref: '#/definitions/CreatePaymentViewModel'}}]
            responses: {'200': {description: 'پرداخت پول جدید با موفقیت ساخته شد', schema: {$ref: '#/definitions/IPosPayResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    /v1/report/TransactionReport:
        post:
            tags: [Report]
            summary: 'گزارش تراکنش ها'
            description: 'از این متد برای نمایش جزئیات تراکنش های کاربر استفاده می شود'
            operationId: ReportTransactionReport
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: "", required: false, schema: {$ref: '#/definitions/TransactionReportModel'}}]
            responses: {'200': {description: 'لیسات تراکنش ها با موفقیت ساخته شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/TransactionReportViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [pay:read]}]
    /v1/report/TransactionReportCount:
        post:
            tags: [Report]
            summary: 'تعداد تراکنش ها'
            description: 'از این متد برای نمایش تعداد تراکنش های برگشت داده شده از متد TransactionReport استفاده می شود'
            operationId: ReportTransactionReportCount
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: "", required: false, schema: {$ref: '#/definitions/BaseTransactionReport'}}]
            responses: {'200': {description: 'تعداد تراکنش ها با موفقیت ساخته شد', schema: {$ref: '#/definitions/ResultVM'}}}
            security: [{Bearer: []}, {oauth2: [pay:read]}]
    /v1/report/WithdrawTransactions:
        post:
            tags: [Report]
            summary: 'دریافت لیست تسویه حساب'
            description: 'به کمک این متد می توانید لیست درخواست های تسویه شده و در انتظار تسویه را نمایش دهید'
            operationId: ReportWithdrawTransactions
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, required: false, schema: {$ref: '#/definitions/TransactionReportModel'}}]
            responses: {'200': {description: 'جزئیات تسویه با موفقیت نمایش داده شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/TransactionWithdrawDetailsViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [pay:read]}]
    /v1/report/WithdrawTransactionsCount:
        post:
            tags: [Report]
            summary: 'تعداد لیست تسویه حساب'
            description: 'به کمک این متد می توانید تعداد لیست درخواست های تسویه شده و در انتظار تسویه را که از متد WithdrawTransactions دریافت کرده اید را نمایش دهید'
            operationId: ReportWithdrawTransactionsCount
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, required: false, schema: {$ref: '#/definitions/BaseTransactionReport'}}]
            responses: {'200': {description: 'جزئیات تسویه با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/ResultVM'}}}
            security: [{Bearer: []}, {oauth2: [pay:read]}]
    '/v1/report/{code}':
        get:
            tags: [Report]
            summary: 'نمایش جزئیات تراکنش'
            operationId: ReportPaymentDetails
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد پرداخت', required: true, type: string}]
            responses: {'200': {description: 'جزئیات تراکنش با موفقیت ساخته شد', schema: {$ref: '#/definitions/PaymentDetailsVM'}}}
            security: [{Bearer: []}, {oauth2: [pay:read]}]
    /v1/request:
        post:
            tags: [Request]
            summary: 'ارسال درخواست پول'
            description: 'از این متد برای ارسال لینک درخواست پول برای یک نفر بصورت  پیامک یا ایمیل استفاده می شود'
            operationId: RequestCreateRequest
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات درخواست پول', required: false, schema: {$ref: '#/definitions/CreateRequestViewModel'}}]
            responses: {'200': {description: 'ساخت درخواست پول جدید با موفقیت انجام شد', schema: {$ref: '#/definitions/RequestResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    /v1/request/Multi:
        post:
            tags: [Request]
            summary: 'ارسال درخواست پول برای چند نفر'
            description: 'از این متد برای ارسال لینک درخواست پول برای چند نفر بصورت  پیامک یا ایمیل استفاده می شود'
            operationId: RequestCreateMultiRequest
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات درخواست گنندگان پول', required: false, schema: {$ref: '#/definitions/CreateMultiRequestViewModel'}}]
            responses: {'200': {description: 'درخواست پول با موفقیت انجام شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/MultiRequestViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    '/v1/request/{code}/SendReminder':
        post:
            tags: [Request]
            summary: 'یادآوری مجدد درخواست پول'
            description: 'از این متد برای ارسال مجدد پیامک یا ایمیل لینک درخواست پول استفاده می شود'
            operationId: RequestSendReminder
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد درخواست', required: true, type: string}]
            responses: {'200': {description: 'یادآوری با موفقیت انجام شد'}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    '/v1/request/{code}':
        delete:
            tags: [Request]
            summary: 'لغو درخواست پول'
            description: 'برای لغو کردن یک کد درخواست می توانید از این متد استفاده کنید'
            operationId: RequestCancelRequest
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد درخواست', required: true, type: string}]
            responses: {'200': {description: 'درخواست با موفقیت کنسل شد'}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    '/v1/withdraw/{amount}':
        post:
            tags: [Withdraw]
            summary: 'درخواست تسویه حساب'
            description: 'به کمک این متد می توانید یک درخواست تسویه با مبلغ دلخواه ایجاد نمایید'
            operationId: WithdrawCreate
            consumes: []
            produces: [application/json]
            parameters: [{name: amount, in: path, description: 'مبلغ تسویه حساب', required: true, type: integer, format: int32}]
            responses: {'200': {description: 'تسویه حساب جدید با موفقیت ساخته شد', schema: {$ref: '#/definitions/WithdrawResult'}}}
            security: [{Bearer: []}, {oauth2: [pay:write]}]
    '/v1/withdrawdetails/{code}':
        get:
            tags: [Withdraw]
            summary: 'نمایش جزئیات درخواست تسویه'
            description: 'از این متد برای نمایش لیست تسویه ها'
            operationId: WithdrawDetails
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد درخواست تسویه', required: true, type: string}]
            responses: {'200': {description: 'جزئیات تسویه با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/WithdrawDetailsViewModel'}}}
            security: [{Bearer: []}, {oauth2: [pay:read]}]
    /v1/customer/List:
        get:
            tags: [Customer]
            summary: 'لیست مشتریان'
            operationId: AddressBookList
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شروع صفحه از شماره 1', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'تعداد سطر بازگشت داده ها مثال : 10', required: false, type: integer, format: int32, default: 10}, {name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}, {name: customerType, in: query, description: 'نوع مشتری - حقیقی یا حقوقی', required: false, type: integer, format: int32, default: 0, enum: [0, 1, 2]}, {name: withPhoto, in: query, description: 'با آدرس تصویر مشتری', required: false, type: boolean, default: false}, {name: code, in: query, description: 'کد مشتری', required: false, type: string}]
            responses: {'200': {description: 'نمایش لیست مشتریان', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/AddressBookListItemViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'مشتری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [customer:read]}]
    /v1/customer/ListCount:
        get:
            tags: [Customer]
            summary: 'تعداد مشتریان'
            operationId: AddressBookListCount
            consumes: []
            produces: [application/json]
            parameters: [{name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}, {name: customerType, in: query, description: 'نوع مشتری - حقیقی یا حقوقی', required: false, type: integer, format: int32, default: 0, enum: [0, 1, 2]}, {name: code, in: query, description: 'کد مشتری', required: false, type: string}]
            responses: {'200': {description: 'نمایش تعداد مشتریان', schema: {$ref: '#/definitions/ListCountViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'مشتری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [customer:read]}]
    '/v1/customer/{code}':
        get:
            tags: [Customer]
            summary: 'مشخصات مشتری'
            operationId: AddressBookGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد مشتری ارسال نمایید', required: true, type: string}]
            responses: {'200': {description: 'نمایش مشخصات مشتری', schema: {$ref: '#/definitions/AddressBookDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'مشتری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [customer:read]}]
        put:
            tags: [Customer]
            summary: 'بروزرسانی مشخصات مشتری'
            operationId: AddressBookPut
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتا مشتری', required: true, type: string}, {name: value, in: body, description: 'مشخصات بروز شده مشتری', required: false, schema: {$ref: '#/definitions/AddressBookEditViewModel'}}]
            responses: {'200': {description: 'نمایش مشخصات مشتری', schema: {$ref: '#/definitions/AddressBookDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'مشتری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [customer:write]}]
        delete:
            tags: [Customer]
            summary: 'حذف مشتری'
            operationId: AddressBookDelete
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتا مشتری', required: true, type: string}]
            responses: {'200': {description: 'نمایش کلید یکتای مشتری', schema: {type: string}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'مشتری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [customer:write]}]
    /v1/customer:
        post:
            tags: [Customer]
            summary: 'مشتری جدید'
            operationId: AddressBookPost
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: 'مشخصات مشتری', required: false, schema: {$ref: '#/definitions/AddressBookCreateViewModel'}}]
            responses: {'200': {description: 'نمایش مشخصات مشتری', schema: {$ref: '#/definitions/AddressBookDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'مشتری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: [customer:write]}, {oauth2: [customer:write]}]
    /v1/Invoice/SumPerStatus:
        get:
            tags: [Invoice]
            summary: 'گزارش جمع مبلغ فاکتور ها براساس وضعیت'
            operationId: InvoiceSumPerStatus
            consumes: []
            produces: [application/json]
            parameters: []
            responses: {'200': {description: 'جمع مبلغ فاکتور ها براساس وضعیت', schema: {$ref: '#/definitions/InvoiceDashboardReportViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'گزارشی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    '/v1/Invoice/Buyer/{code}':
        get:
            tags: [Invoice]
            summary: 'دریافت مشخصات پرداخت کننده فاکتور'
            operationId: InvoiceBuyer
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, required: true, type: string}]
            responses: {'200': {description: 'مشخصات پرداخت کننده فاکتور', schema: {$ref: '#/definitions/AddressBookDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    '/v1/Invoice/Schedule/{code}':
        get:
            tags: [Invoice]
            summary: 'دریافت فاکتور زمانبندی شده'
            operationId: InvoiceScheduleGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, required: true, type: string}]
            responses: {'200': {description: 'فاکتور زمانبندی شده', schema: {$ref: '#/definitions/ScheduleInvoiceWithChilds'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    '/v1/Invoice/Subschedulers/{code}':
        get:
            tags: [Invoice]
            summary: 'دریافت اطلاعات زمانبندی شده فاکتور'
            operationId: InvoiceSubschedulers
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, required: true, type: string}]
            responses: {'200': {description: 'اطلاعات زمانبندی شده فاکتور', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceSubSchulderDetailViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Invoice/List:
        get:
            tags: [Invoice]
            summary: 'لیست فاکتور ها'
            operationId: InvoiceList
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: "", required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: "", required: false, type: integer, format: int32, default: 10}, {name: status, in: query, description: 'فیلتر وضعیت', required: false, type: integer, format: int32, default: 5, enum: [0, 1, 2, 3, 4, 5]}, {name: isArchived, in: query, description: 'فیلتر بایگانی', required: false, type: boolean, default: false}, {name: searchByDueDate, in: query, description: 'فیلتر با تاریخ سررسید', required: false, type: boolean, default: false}, {name: searchByCreateDate, in: query, description: 'فیلتر با تاریخ ثبت', required: false, type: boolean, default: false}, {name: searchDateFrom, in: query, description: 'شروع از تاریخ', required: false, type: string, format: date-time}, {name: searchDateTo, in: query, description: 'تا تاریخ', required: false, type: string, format: date-time}, {name: search, in: query, description: 'متن جستجو', required: false, type: string}, {name: addressBookCode, in: query, description: 'فیلتر بر اساس کد مشتری', required: false, type: string}, {name: invoiceCode, in: query, description: 'فیلتر براساس کد فاکتور', required: false, type: string}]
            responses: {'200': {description: 'نمایش لیست فاکتور ها', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceListItemViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Invoice/ListCount:
        get:
            tags: [Invoice]
            summary: 'تعداد فاکتور ها'
            operationId: InvoiceListCount
            consumes: []
            produces: [application/json]
            parameters: [{name: status, in: query, description: 'فیلتر وضعیت', required: false, type: integer, format: int32, default: 5, enum: [0, 1, 2, 3, 4, 5]}, {name: isArchived, in: query, description: 'فیلتر بایگانی', required: false, type: boolean, default: false}, {name: searchByDueDate, in: query, description: 'فیلتر با تاریخ سررسید', required: false, type: boolean, default: false}, {name: searchByCreateDate, in: query, description: 'فیلتر با تاریخ ثبت', required: false, type: boolean, default: false}, {name: searchDateFrom, in: query, description: 'شروع از تاریخ', required: false, type: string, format: date-time}, {name: searchDateTo, in: query, description: 'تا تاریخ', required: false, type: string, format: date-time}, {name: search, in: query, description: 'متن جستجو', required: false, type: string}, {name: addressBookCode, in: query, description: 'فیلتر بر اساس کد مشتری', required: false, type: string}, {name: invoiceCode, in: query, description: 'فیلتر براساس کد فاکتور', required: false, type: string}]
            responses: {'200': {description: 'نمایش تعداد فاکتور ها', schema: {$ref: '#/definitions/ListCountViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Invoice/ListSchedule:
        get:
            tags: [Invoice]
            summary: 'لیست فاکتور ها زمانبندی شده'
            operationId: InvoiceListSchedule
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: "", required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: "", required: false, type: integer, format: int32, default: 10}, {name: status, in: query, description: 'فیلتر وضعیت', required: false, type: integer, format: int32, default: 5, enum: [0, 1, 2, 3, 4, 5]}, {name: isArchived, in: query, description: 'فیلتر بایگانی', required: false, type: boolean, default: false}, {name: searchByDueDate, in: query, description: 'فیلتر با تاریخ سررسید', required: false, type: boolean, default: false}, {name: searchByCreateDate, in: query, description: 'فیلتر با تاریخ ثبت', required: false, type: boolean, default: false}, {name: searchDateFrom, in: query, description: 'شروع از تاریخ', required: false, type: string, format: date-time}, {name: searchDateTo, in: query, description: 'تا تاریخ', required: false, type: string, format: date-time}, {name: search, in: query, description: 'متن جستجو', required: false, type: string}, {name: addressBookCode, in: query, description: 'فیلتر بر اساس کد مشتری', required: false, type: string}, {name: invoiceCode, in: query, description: 'فیلتر براساس کد فاکتور', required: false, type: string}]
            responses: {'200': {description: 'نمایش لیست فاکتور ها زمانبندی شده', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceListItemViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Invoice/ListScheduleCount:
        get:
            tags: [Invoice]
            summary: 'تعداد فاکتور ها زمانبندی شده'
            operationId: InvoiceListScheduleCount
            consumes: []
            produces: [application/json]
            parameters: [{name: status, in: query, description: 'فیلتر وضعیت', required: false, type: integer, format: int32, default: 5, enum: [0, 1, 2, 3, 4, 5]}, {name: isArchived, in: query, description: 'فیلتر بایگانی', required: false, type: boolean, default: false}, {name: searchByDueDate, in: query, description: 'فیلتر با تاریخ سررسید', required: false, type: boolean, default: false}, {name: searchByCreateDate, in: query, description: 'فیلتر با تاریخ ثبت', required: false, type: boolean, default: false}, {name: searchDateFrom, in: query, description: 'شروع از تاریخ', required: false, type: string, format: date-time}, {name: searchDateTo, in: query, description: 'تا تاریخ', required: false, type: string, format: date-time}, {name: search, in: query, description: 'متن جستجو', required: false, type: string}, {name: addressBookCode, in: query, description: 'فیلتر بر اساس کد مشتری', required: false, type: string}, {name: invoiceCode, in: query, description: 'فیلتر براساس کد فاکتور', required: false, type: string}]
            responses: {'200': {description: 'نمایش تعداد فاکتور ها زمانبندی شده', schema: {$ref: '#/definitions/ListCountViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    '/v1/Invoice/{code}':
        get:
            tags: [Invoice]
            summary: 'دریافت فاکتور'
            operationId: InvoiceGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور', required: true, type: string}]
            responses: {'200': {description: 'نمایش فاکتور', schema: {$ref: '#/definitions/InvoiceDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
        put:
            tags: [Invoice]
            summary: 'بروزرسانی فاکتور'
            operationId: InvoicePut
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور', required: true, type: string}, {name: value, in: body, description: 'فاکتور بروز شده', required: false, schema: {$ref: '#/definitions/InvoiceEditViewModel'}}]
            responses: {'200': {description: 'نمایش فاکتور', schema: {$ref: '#/definitions/InvoiceDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتور یا داده های وابسته به فاکتور با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
        delete:
            tags: [Invoice]
            summary: 'حذف فاکتور'
            operationId: InvoiceDelete
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور', required: true, type: string}]
            responses: {'200': {description: 'نمایش کلید یکتای فاکتور', schema: {type: string}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/Invoice/SendByTemplateAdvance:
        post:
            tags: [Invoice]
            summary: 'ارسال فاکتور جدید با استفاده از قالب - پیشرفته'
            operationId: InvoiceSendByTemplateAdvance
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: 'مشخصات فاکتور', required: false, schema: {$ref: '#/definitions/InvoiceSendByTemplate'}}]
            responses: {'200': {description: 'نمایش فاکتور', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceDetailViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتور یا داده های وابسته به فاکتور با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/Invoice/SendByTemplateSimple:
        post:
            tags: [Invoice]
            summary: 'ارسال فاکتور جدید با استفاده از قالب - سریع'
            operationId: InvoiceSendByTemplateSimple
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: 'مشخصات فاکتور', required: false, schema: {$ref: '#/definitions/InvoiceSendByTemplateSimple'}}]
            responses: {'200': {description: 'نمایش فاکتور', schema: {$ref: '#/definitions/InvoiceDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتور یا داده های وابسته به فاکتور با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/Invoice:
        post:
            tags: [Invoice]
            summary: 'فاکتور جدید'
            operationId: InvoicePost
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: 'مشخصات فاکتور', required: false, schema: {$ref: '#/definitions/InvoiceCreateViewModel'}}]
            responses: {'200': {description: 'نمایش فاکتور', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceDetailViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتور یا داده های وابسته به فاکتور با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/Invoice/Schedule:
        post:
            tags: [Invoice]
            summary: 'فاکتور زمانبندی شده جدید'
            operationId: InvoiceSchedulePost
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: 'مشخصات فاکتور زمانبندی شده', required: false, schema: {$ref: '#/definitions/InvoiceCreateScheduleViewModel'}}]
            responses: {'200': {description: 'نمایش فاکتور زمانبندی شده', schema: {$ref: '#/definitions/InvoiceDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتور یا داده های وابسته به فاکتور با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    '/v1/Invoice/DeleteSchedule/{code}':
        delete:
            tags: [Invoice]
            summary: 'حذف فاکتور زمانبندی شده'
            operationId: InvoiceDeleteSchedule
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور زمانبندی شده', required: true, type: string}]
            responses: {'200': {description: 'نمایش کلید یکتای فاکتور زمانبندی شده', schema: {type: string}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    '/v1/Invoice/Pdf/{code}':
        get:
            tags: [Invoice]
            summary: 'درخواست فاکتور غیر رسمی'
            operationId: InvoicePdf
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور', required: true, type: string}]
            responses: {'200': {description: 'نمایش مشخصات فایل فاکتور غیر رسمی', schema: {$ref: '#/definitions/InvoicePdfResponseViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Invoice/Cancel:
        post:
            tags: [Invoice]
            summary: 'درخواست لغو فاکتور'
            operationId: InvoiceCancel
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: "", required: false, schema: {$ref: '#/definitions/InvoiceCancelRequest'}}]
            responses: {'200': {description: 'نمایش فاکتور', schema: {$ref: '#/definitions/InvoiceCancelResponse'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
    '/v1/Invoice/Reminder/{code}':
        post:
            tags: [Invoice]
            summary: 'ارسال یادآوری فاکتور'
            operationId: InvoiceReminder
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور', required: true, type: string}]
            responses: {'200': {description: 'نمایش وضعیت ارسال یادآوری فاکتور', schema: {$ref: '#/definitions/InvoiceSendReminderResponseViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    '/v1/Invoice/Send/{code}':
        post:
            tags: [Invoice]
            summary: 'ارسال فاکتور'
            operationId: InvoiceSend
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای فاکتور', required: true, type: string}]
            responses: {'200': {description: 'نمایش وضعیت ارسال فاکتور', schema: {$ref: '#/definitions/InvoiceSendInvoiceResponseViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/Invoice/SetCustomer:
        post:
            tags: [Invoice]
            summary: 'ثبت مشتری به فاکتور'
            operationId: InvoiceSetCustomer
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: "", required: false, schema: {$ref: '#/definitions/InvoiceSetCustomerRequestViewModel'}}]
            responses: {'200': {description: 'نمایش وضعیت ثبت مشتری فاکتور', schema: {$ref: '#/definitions/InvoiceConfirmPaymentResponseViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'فاکتوری با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
    /v1/Template/List:
        get:
            tags: [Template]
            summary: 'لیست قالب ها'
            operationId: TemplateList
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شروع صفحه از شماره 1', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'تعداد سطر بازگشت داده ها مثال : 10', required: false, type: integer, format: int32, default: 10}, {name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}, {name: code, in: query, description: 'کد قالب', required: false, type: string}]
            responses: {'200': {description: 'نمایش قالب ها', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceTemplateListItemViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Template/ListCount:
        get:
            tags: [Template]
            summary: 'تعداد قالب ها'
            operationId: TemplateListCount
            consumes: []
            produces: [application/json]
            parameters: [{name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}, {name: code, in: query, description: 'کد قالب', required: false, type: string}]
            responses: {'200': {description: 'نمایش تعداد قالب ها', schema: {$ref: '#/definitions/ListCountViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Template/ListSchedule:
        get:
            tags: [Template]
            summary: 'لیست قالب های زمانبندی'
            operationId: TemplateListSchedule
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شروع صفحه از شماره 1', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'تعداد سطر بازگشت داده ها مثال : 10', required: false, type: integer, format: int32, default: 10}, {name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}]
            responses: {'200': {description: 'نمایش قالب ها', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceTemplateListItemViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Template/ListScheduleCount:
        get:
            tags: [Template]
            summary: 'تعداد قالب های زمانبندی'
            operationId: TemplateListScheduleCount
            consumes: []
            produces: [application/json]
            parameters: [{name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}]
            responses: {'200': {description: 'نمایش تعداد قالب ها', schema: {$ref: '#/definitions/ListCountViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Template/ListNonSchedule:
        get:
            tags: [Template]
            summary: 'لیست قالب های غیر زمانبندی'
            operationId: TemplateListNonSchedule
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شروع صفحه از شماره 1', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'تعداد سطر بازگشت داده ها مثال : 10', required: false, type: integer, format: int32, default: 10}, {name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}]
            responses: {'200': {description: 'نمایش قالب ها', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceTemplateListItemViewModel'}}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    /v1/Template/ListNonScheduleCount:
        get:
            tags: [Template]
            summary: 'تعداد قالب های غیر زمانبندی'
            operationId: TemplateListNonScheduleCount
            consumes: []
            produces: [application/json]
            parameters: [{name: search, in: query, description: 'متن مورد نظر جهت جستجو', required: false, type: string}]
            responses: {'200': {description: 'نمایش تعداد قالب ها', schema: {$ref: '#/definitions/ListCountViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
    '/v1/Template/{code}':
        get:
            tags: [Template]
            summary: 'دریافت قالب'
            operationId: TemplateGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای قالب', required: true, type: string}]
            responses: {'200': {description: 'نمایش قالب', schema: {$ref: '#/definitions/InvoiceTemplateDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:read]}]
        put:
            tags: [Template]
            summary: 'بروزرسانی قالب'
            operationId: TemplatePut
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای قالب', required: true, type: string}, {name: value, in: body, description: 'قالب بروز شده', required: false, schema: {$ref: '#/definitions/InvoiceTemplateEditViewModel'}}]
            responses: {'200': {description: 'نمایش قالب', schema: {$ref: '#/definitions/InvoiceTemplateDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالب یا داده های وابسته به قالب با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
        delete:
            tags: [Template]
            summary: 'حذف قالب'
            operationId: TemplateDelete
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کلید یکتای قالب', required: true, type: string}]
            responses: {'200': {description: 'نمایش کلید یکتای قالب', schema: {type: string}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'قالبی با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/Template:
        post:
            tags: [Template]
            summary: 'قالب جدید'
            operationId: TemplatePost
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: value, in: body, description: 'مشخصات قالب', required: false, schema: {$ref: '#/definitions/InvoiceTemplateCreateViewModel'}}]
            responses: {'200': {description: 'نمایش قالب', schema: {$ref: '#/definitions/InvoiceTemplateDetailViewModel'}}, '400': {description: 'مشکلی در ارسال درخواست وجود دارد', schema: {type: object, additionalProperties: {type: string}}}, '401': {description: 'عدم دسترسی'}, '403': {description: 'دسترسی غیرمجاز'}, '404': {description: 'اطلاعات وابسته نسبت به ثبت قالب جدید با داده های ورودی درخواست شما پیدا نشد'}, '500': {description: 'مشکلی در سرور رخ داده است'}}
            security: [{Bearer: []}, {oauth2: [invoice:write]}]
    /v1/coupon:
        put:
            tags: [coupon]
            summary: 'بروزرسانی کد تخفیف'
            operationId: couponEdit
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات کد تخفیف', required: false, schema: {$ref: '#/definitions/CouponEditViewModel'}}]
            responses: {'200': {description: 'کد تخفیف با موفقیت بروزرسانی شد'}, '404': {description: 'کد تخفیفی با این شناسه وجود ندارد'}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
        post:
            tags: [coupon]
            summary: 'ساخت یک کد تخفیف جدید'
            operationId: couponCreate
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات کد تخفیف', required: false, schema: {$ref: '#/definitions/CouponCreateViewModel'}}]
            responses: {'200': {description: 'کد تخفیف با موفقیت ساخته شد', schema: {$ref: '#/definitions/CodeVM'}}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
    '/v1/coupon/{code}':
        get:
            tags: [coupon]
            summary: 'نمایش یک کد تخفیف'
            operationId: couponGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'شناسه کد تخفیف', required: true, type: string}]
            responses: {'200': {description: 'کد تخفیف با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/CouponDetailViewModel'}}, '404': {description: 'کد تخفیفی با این شناسه وجود ندارد'}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
        delete:
            tags: [coupon]
            summary: 'حذف یک کد تخفیف'
            operationId: couponDelete
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'شناسه کد تخفیف', required: true, type: string}]
            responses: {'200': {description: 'کد تخفیف با موفقیت حذف شد'}, '404': {description: 'کد تخفیفی با این شناسه وجود ندارد'}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
    /v1/coupon/List:
        get:
            tags: [coupon]
            summary: 'نمایش لیست کدهای تخفیف'
            operationId: couponGetList
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شماره ابتدا لیست', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'شماره انتها لیست', required: false, type: integer, format: int32, default: 10}, {name: witharchived, in: query, description: 'اضافه شدن کدهای تخفیف‌ آرشیو شده', required: false, type: boolean, default: false}, {name: search, in: query, description: 'کیلدواژه جستجو در کدهای تخفیف', required: false, type: string}, {name: productcode, in: query, description: "", required: false, type: string}]
            responses: {'200': {description: 'لیست کدهای تخفیف با موفقیت نمایش داده شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/CouponListItemViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    /v1/coupon/ListCount:
        get:
            tags: [coupon]
            summary: 'دریافت تعداد کدهای تخفیف'
            operationId: couponGetListCount
            consumes: []
            produces: [application/json]
            parameters: [{name: witharchived, in: query, required: false, type: boolean, default: false}, {name: search, in: query, required: false, type: string}]
            responses: {'200': {description: 'تعداد کدهای تخفیف با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/CountVM'}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    '/v1/coupon/{couponCode}/BuyersListCount':
        get:
            tags: [coupon]
            summary: 'دریافت تعداد خرید‌های یک کد تخفیف'
            operationId: couponGetBuyersUseCouponCount
            consumes: []
            produces: [application/json]
            parameters: [{name: couponCode, in: path, description: 'شناسه کد تخفیف', required: true, type: string}]
            responses: {'200': {description: 'تعداد خریدهای یک کد تخفیف با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/CountVM'}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    '/v1/coupon/{couponCode}/BuyersList':
        get:
            tags: [coupon]
            summary: 'دریافت لیست پرداخت‌های انجام شده یک کد تخفیف'
            operationId: couponGetBuyersUseCoupon
            consumes: []
            produces: [application/json]
            parameters: [{name: couponCode, in: path, description: 'شناسه کد تخفیف', required: true, type: string}, {name: offset, in: query, description: 'شماره ابتدا لیست', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'شماره انتها لیست', required: false, type: integer, format: int32, default: 10}]
            responses: {'200': {description: 'لیست خریدهای این کد تخفیف با موفقیت نمایش داده شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/BuyerDetailsViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    '/v1/ItemPay/{code}':
        get:
            tags: [ItemPay]
            summary: 'دریافت مشخصات پرداخت آیتم‌مالی به همراه لینک‌ثابت'
            operationId: ItemPayGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, required: true, type: string}]
            responses: {'200': {description: 'مشخصات پرداخت آیتم‌مالی به همراه لینک‌ثابت با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/PayGetViewModel'}}}
    '/v1/ItemPay':
        post:
            tags: [ItemPay]
            summary: 'ارسال مشخصات پرداخت آیتم‌مالی برای پرداخت'
            operationId: ItemPayPost
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, required: false, schema: {$ref: '#/definitions/PermanentPaymentViewModel'}}]
            responses: {'200': {description: 'پرداخت آیتم‌مالی با موفقیت انجام شد'}}
    /v1/ItemPay/CheckCoupon:
        post:
            tags: [ItemPay]
            summary: 'چک کردن وضعیت یک کد تخفیف برای پرداخت'
            operationId: ItemPayCheckCoupon
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, required: false, schema: {$ref: '#/definitions/CouponViewModel'}}]
            responses: {'200': {description: 'مشخصات یک کد تخفیف با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/CouponResultVM'}}}
    /v1/ItemPay/VerifyPermaLink:
        post:
            tags: [ItemPay]
            summary: 'تایید پرداخت لینک‌ثابت یک آیتم‌مالی'
            operationId: ItemPayVerifyPermanentLink
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: verfyPermaVM, in: body, required: false, schema: {$ref: '#/definitions/VerfyPermaVM'}}]
            responses: {'200': {description: 'پرداخت لینک‌ثابت این آیتم‌مالی با موفقیت تایید شد', schema: {$ref: '#/definitions/PayReportViewModel'}}}
    /v1/permaLink:
        put:
            tags: [permaLink]
            summary: 'بروزرسانی لینک ثابت'
            operationId: permaLinkEdit
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات لینک ثابت', required: false, schema: {$ref: '#/definitions/PermanentEditViewModel'}}]
            responses: {'200': {description: 'لینک ثابت با موفقیت بروزرسانی شد'}, '404': {description: 'لینک ثابتی با این شناسه وجود ندارد'}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
        post:
            tags: [permaLink]
            summary: 'ساخت یک لینک ثابت جدید'
            operationId: permaLinkCreate
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات لینک ثابت', required: false, schema: {$ref: '#/definitions/PermanentCreateViewModel'}}]
            responses: {'200': {description: 'لینک ثابت با موفقیت ساخته شد', schema: {$ref: '#/definitions/CodeVM'}}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
    '/v1/permaLink/{code}':
        get:
            tags: [permaLink]
            summary: 'نمایش یک لینک ثابت'
            operationId: permaLinkGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'شناسه لینک ثابت', required: true, type: string}]
            responses: {'200': {description: 'لینک ثابت با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/PermanentDetailViewModel'}}, '404': {description: 'لینک ثابتی با این شناسه وجود ندارد'}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
        delete:
            tags: [permaLink]
            summary: 'حذف یک لینک ثابت'
            operationId: permaLinkDelete
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'شناسه لینک ثابت', required: true, type: string}]
            responses: {'200': {description: 'لینک ثابت با موفقیت حذف شد'}, '404': {description: 'لینک ثابتی با این شناسه وجود ندارد'}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
    /v1/permaLink/List:
        get:
            tags: [permaLink]
            summary: 'نمایش لیست لینک‌های ثابت'
            operationId: permaLinkGetList
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شماره ابتدا لیست', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'شماره انتها لیست', required: false, type: integer, format: int32, default: 10}, {name: witharchived, in: query, description: 'اضافه شدن لینک‌های ثابت‌ آرشیو شده', required: false, type: boolean, default: false}, {name: search, in: query, description: 'کیلدواژه جستجو در لینک‌های ثابت', required: false, type: string}]
            responses: {'200': {description: 'لیست لینک‌های ثابت‌ با موفقیت نمایش داده شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/PermanentListItemViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    /v1/permaLink/ListCount:
        get:
            tags: [permaLink]
            summary: 'دریافت تعداد لینک‌های ثابت'
            operationId: permaLinkGetListCount
            consumes: []
            produces: [application/json]
            parameters: [{name: witharchived, in: query, required: false, type: boolean, default: false}, {name: search, in: query, required: false, type: string}]
            responses: {'200': {description: 'تعداد لینک‌های ثابت با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/CountVM'}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    '/v1/permaLink/{productCode}/BuyersList':
        get:
            tags: [permaLink]
            summary: 'دریافت لیست پرداخت‌های انجام شده یک لینک‌ثابت'
            operationId: permaLinkGetPermanentBuyersPaging
            consumes: []
            produces: [application/json]
            parameters: [{name: productCode, in: path, description: 'کد آیتم‌مالی', required: true, type: string}, {name: offset, in: query, description: 'شماره ابتدا لیست', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'شماره انتها لیست', required: false, type: integer, format: int32, default: 10}]
            responses: {'200': {description: 'لیست با موفقیت نمایش داده شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/ProductBuyerViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    '/v1/permaLink/{productCode}/BuyersListCount':
        get:
            tags: [permaLink]
            summary: 'دریافت تعداد پرداختی‌های یک لینک‌ثابت'
            operationId: permaLinkGetPermanentBuyersCountByCode
            consumes: []
            produces: [application/json]
            parameters: [{name: productCode, in: path, description: 'کد آیتم‌مالی', required: true, type: string}]
            responses: {'200': {description: 'تعداد پرداختی‌های یک لینک‌ثابت با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/CountVM'}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    '/v1/permaLink/{payCode}/Buyer':
        get:
            tags: [permaLink]
            summary: 'دریافت جزئیات پرداخت یک لینک‌ثابت'
            operationId: permaLinkGetBuyerDetailByPaymentCode
            consumes: []
            produces: [application/json]
            parameters: [{name: payCode, in: path, description: 'کد پرداخت', required: true, type: string}]
            responses: {'200': {description: 'جزئیات پرداخت یک آیتم‌مالی با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/BuyerDetailsViewModel'}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
    /v1/product:
        put:
            tags: [product]
            summary: 'بروزرسانی آیتم مالی'
            operationId: productEdit
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات آیتم مالی', required: false, schema: {$ref: '#/definitions/ProductEditViewModel'}}]
            responses: {'200': {description: 'آیتم‌ مالی با موفقیت بروزرسانی شد'}, '404': {description: 'آیتم مالی با این کد موجود نمی‌باشد'}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
        post:
            tags: [product]
            summary: 'ساخت یک آیتم‌ مالی جدید'
            operationId: productCreate
            consumes: [application/json]
            produces: [application/json]
            parameters: [{name: model, in: body, description: 'مشخصات آیتم مالی', required: false, schema: {$ref: '#/definitions/ProductCreateViewModel'}}]
            responses: {'200': {description: 'آیتم مالی با موفقیت ساخته شد', schema: {$ref: '#/definitions/CodeVM'}}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
    '/v1/product/{code}':
        get:
            tags: [product]
            summary: 'نمایش یک آیتم مالی'
            operationId: productGet
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد آیتم مالی', required: true, type: string}]
            responses: {'200': {description: 'آیتم مالی با موفقیت نمایش داده شد', schema: {$ref: '#/definitions/ProductFullDeatilViewModel'}}, '404': {description: 'آیتم مالی با این کد موجود نمی‌باشد'}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
        delete:
            tags: [product]
            summary: 'حذف یک آیتم مالی'
            operationId: productDelete
            consumes: []
            produces: [application/json]
            parameters: [{name: code, in: path, description: 'کد آیتم مالی', required: true, type: string}]
            responses: {'200': {description: 'آیتم مالی با موفقیت حذف شد'}, '404': {description: 'آیتم مالی با این کد موجود نمی‌باشد'}}
            security: [{Bearer: []}, {oauth2: [product:write]}]
    /v1/product/List:
        get:
            tags: [product]
            summary: 'دریافت لیست آیتم‌های مالی'
            operationId: productGetList
            consumes: []
            produces: [application/json]
            parameters: [{name: offset, in: query, description: 'شماره ابتدا لیست', required: false, type: integer, format: int32, default: 0}, {name: limit, in: query, description: 'شماره انتها لیست', required: false, type: integer, format: int32, default: 10}, {name: witharchived, in: query, description: 'اضافه شدن آیتم‌های آرشیو شده', required: false, type: boolean, default: false}, {name: search, in: query, description: 'کیلدواژه جستجو در آیتم‌های مالی', required: false, type: string}]
            responses: {'200': {description: 'لیست آیتم‌های مالی با موفقیت نمایش داده شد', schema: {uniqueItems: false, type: array, items: {$ref: '#/definitions/ProductListItemViewModel'}}}}
            security: [{Bearer: []}, {oauth2: [product:read]}]
            
    /v1/Upload/ProfilePic:
        post:
            tags: [Upload]
            summary: 'آپلود عکس پروفایل کاربری'
            description: "محدودیت‌های فایل‌های ورودی:\r\n\r\nJPG, PNG, JPEG"
            operationId: UploadProfilePic
            consumes: [multipart/form-data]
            produces: [application/json]
            parameters: [{name: file, in: formData, description: 'بارگزاری فایل', required: true, type: file}]
            responses: {'200': {description: 'عکس کاربر با موفقیت آپلود شد'}}
            security: [{Bearer: []}, {oauth2: [upload.write]}]
    /v1/Upload/Item:
        post:
            tags: [Upload]
            summary: 'آپلود عکس یک آیتم‌مالی'
            description: "محدودیت‌های فایل‌های ورودی:\r\n\r\nJPG, PNG, JPEG"
            operationId: UploadItem
            consumes: [multipart/form-data]
            produces: [application/json]
            parameters: [{name: file, in: formData, description: 'بارگزاری فایل', required: true, type: file}]
            responses: {'200': {description: 'عکس آیتم‌مالی با موفقیت آپلود شد'}}
            security: [{Bearer: []}, {oauth2: [upload.write]}]
    /v1/Upload/InvoiceAttachment:
        post:
            tags: [Upload]
            summary: 'آپلود فایل‌ ضمیمه یک فاکتور'
            description: "محدودیت‌های فایل‌های ورودی:\r\n\r\nمحدودیت ندارد."
            operationId: UploadInvoiceAttachment
            consumes: [multipart/form-data]
            produces: [application/json]
            parameters: [{name: file, in: formData, description: 'بارگزاری فایل', required: true, type: file}]
            responses: {'200': {description: 'فایل ضمیمه فاکتور با موفقیت آپلود شد'}}
            security: [{Bearer: []}, {oauth2: [upload.write]}]
definitions:
    CreatePaymentViewModel:
        required:
            - amount
            - returnUrl
        type: object
        properties:
            amount: {format: int32, description: مبلغ, maximum: 50000000, minimum: 100, type: integer}
            payerIdentity: {description: 'شماره موبایل یا ایمیل پرداخت کننده', type: string}
            payerName: {description: 'نام پرداخت کننده', type: string}
            description: {description: توضیحات, type: string}
            returnUrl: {description: 'آدرس صفحه برگشت', type: string}
            clientRefId: {description: 'کد ارسالی توسط کاربر', type: string}
    PaymentResult:
        type: object
        properties:
            code: {description: 'کد پرداخت', type: string}
    CreateMultiPaymentViewModel:
        required:
            - returnUrl
        type: object
        properties:
            payerName: {description: 'نام پرداخت کننده', type: string}
            pairs: {description: 'لیست پرداخت ها', uniqueItems: false, type: array, items: {$ref: '#/definitions/MultiPayPair'}}
            returnUrl: {description: 'آدرس صفحه برگشت', type: string}
            clientRefId: {description: 'کد ارسالی توسط کاربر', type: string}
    MultiPayPair:
        required:
            - amount
            - userIdentity
        type: object
        properties:
            amount: {format: int32, description: مبلغ, type: integer}
            name: {description: نام, type: string}
            userIdentity: {description: 'نام کاربری/ایمیل کاربری', type: string}
            description: {description: توضیحات, type: string}
    UnBlockMoneyViewModel:
        type: object
        properties:
            clientId: {description: 'شناسه مشتری', type: string}
            code: {description: 'کد پرداخت', type: string}
    VerifyPaymentViewModel:
        required:
            - refId
            - amount
        type: object
        properties:
            refId: {description: 'شماره فاکتور', type: string}
            amount: {format: int32, description: 'مبلغ تراکنش', maximum: 50000000, minimum: 100, type: integer}
    IPosPayResult:
        type: object
        properties:
            itd: {format: int32, type: integer}
            code: {type: string}
    TransactionReportModel:
        type: object
        properties:
            offset: {format: int32, description: 'نقطه شروع گزارش', type: integer}
            limit: {format: int32, description: 'نقطه پایان گزارش', type: integer}
            clientsInfos: {description: 'لیست ClientId,ClientInfo', uniqueItems: false, type: array, items: {$ref: '#/definitions/ClientsInfo'}}
            filter: {description: "اعمال فیلتر بر روی فلگ های \r\nکد پرداخت\r\nمبلغ\r\nتاریخ پرداخت\r\nکد ارسالی مشتری به پی پینگ\r\nتوضیحات\r\nنام یا شناسه پرداخت کننده", uniqueItems: false, type: array, items: {type: string}}
            transactionType: {format: int32, description: "نوع تراکنش\r\nدریافت ها =6\r\nپرداخت ها=7", enum: [6, 7], type: integer}
            fromDate: {format: date-time, description: 'تاریخ شروع گزارش', type: string}
            toDate: {format: date-time, description: 'تاریخ پایان گزارش', type: string}
    ClientsInfo:
        type: object
        properties:
            clientId: {type: string}
            clientRefId: {type: string}
    TransactionReportViewModel:
        type: object
        properties:
            amount: {format: int32, description: مبلغ, type: integer}
            payDate: {format: date-time, description: 'تاریخ پرداخت', type: string}
            isPaid: {description: 'اینکه پرداخت تایید شده است', type: boolean}
            description: {description: توضیحات, type: string}
            name: {description: 'نام پرداخت کننده/دریافت کننده', type: string}
            payerIdentity: {description: 'شماره موبایل یا ایمیل پرداخت کننده', type: string}
            isRequest: {description: درخواست/پرداخت, type: boolean}
            code: {description: 'کد پرداخت', type: string}
            clientId: {description: 'شناسه زیر سیستم مشتری در پی پینگ', type: string}
            clientRefId: {description: 'کد ارسالی مشتری به پی پینگ', type: string}
            invoiceNo: {description: 'شناسه پرداخت', type: string}
            createdDate: {format: date-time, description: 'تاریخ ساخت پرداخت/درخواست', type: string}
    BaseTransactionReport:
        type: object
        properties:
            clientsInfos: {description: 'لیست ClientId,ClientInfo', uniqueItems: false, type: array, items: {$ref: '#/definitions/ClientsInfo'}}
            filter: {description: "اعمال فیلتر بر روی فلگ های \r\nکد پرداخت\r\nمبلغ\r\nتاریخ پرداخت\r\nکد ارسالی مشتری به پی پینگ\r\nتوضیحات\r\nنام یا شناسه پرداخت کننده", uniqueItems: false, type: array, items: {type: string}}
            transactionType: {format: int32, description: "نوع تراکنش\r\nدریافت ها =6\r\nپرداخت ها=7", enum: [6, 7], type: integer}
            fromDate: {format: date-time, description: 'تاریخ شروع گزارش', type: string}
            toDate: {format: date-time, description: 'تاریخ پایان گزارش', type: string}
    ResultVM:
        type: object
        properties:
            result: {format: int64, description: تعداد, type: integer}
    TransactionWithdrawDetailsViewModel:
        type: object
        properties:
            reqDate: {format: date-time, type: string}
            code: {type: string}
            isRepaid: {type: boolean}
            repayDate: {format: date-time, type: string}
            amount: {format: int32, type: integer}
    PaymentDetailsVM:
        type: object
        properties:
            amount: {format: int32, description: مبلغ, type: integer}
            reqDate: {format: date-time, description: 'تاریخ درخواست', type: string}
            payDate: {format: date-time, description: 'تاریخ پرداخت', type: string}
            isRequest: {description: درخواست/پرداخت, type: boolean}
            isPaid: {description: 'تاییدیه پرداخت', type: boolean}
            description: {description: توضیحات, type: string}
            payerIdentity: {description: 'شماره موبایل یا ایمیل پرداخت کننده', type: string}
            platform: {description: 'نوع سیستم عامل پرداخت کننده', type: string}
            browser: {description: 'مرورگر پرداخت کننده', type: string}
            rrn: {description: 'شماره کارت پرداخت کننده', type: string}
            clientId: {description: 'شناسه زیر سیستم مشتری در پی پینگ', type: string}
            clientRefId: {description: 'کد ارسالی مشتری به پی پینگ', type: string}
            invoiceNo: {description: 'شناسه پرداخت', type: string}
            wage: {format: int32, description: کارمزد, type: integer}
            ipgName: {description: 'درگاه پرداخت کننده', type: string}
            isBlocked: {type: boolean}
            name: {type: string}
    CreateRequestViewModel:
        required:
            - returnUrl
        type: object
        properties:
            name: {description: 'نام درخواست کننده', type: string}
            amount: {format: int32, description: مبلغ, maximum: 50000000, minimum: 100, type: integer}
            payerIdentity: {description: 'نام کاربری درخواست کننده (در صورت وجود)', type: string}
            description: {description: توضیحات, type: string}
            returnUrl: {description: 'آدرس صفحه برگشت', type: string}
            clientRefId: {description: 'کد ارسالی توسط کاربر', type: string}
    RequestResult:
        type: object
        properties:
            code: {description: 'کد درخواست', type: string}
    CreateMultiRequestViewModel:
        required:
            - returnUrl
        type: object
        properties:
            pairs: {description: 'لیست درخواست دهنده ها', uniqueItems: false, type: array, items: {$ref: '#/definitions/MultiPayPair'}}
            returnUrl: {description: 'آدرس صفحه برگشت', type: string}
            clientRefId: {description: 'کد ارسالی توسط کاربر', type: string}
    MultiRequestViewModel:
        type: object
        properties:
            username: {description: 'نام کاربری', type: string}
            code: {description: 'کد درخواست', type: string}
    WithdrawResult:
        type: object
        properties:
            code: {description: 'کد تسویه', type: string}
    WithdrawDetailsViewModel:
        type: object
        properties:
            amount: {format: int32, description: مبلغ, type: integer}
            reqDate: {format: date-time, description: 'تاریخ درخواست تسویه', type: string}
            isRepaid: {description: 'تاییدیه تسویه', type: boolean}
            repayDate: {format: date-time, description: 'تاریخ تایید تسویه', type: string}
    AddressBookListItemViewModel:
        description: 'مشخصات مشتری'
        type: object
        properties:
            code: {description: 'کلید یکتا مشتری', type: string}
            email: {description: 'پست الکترونیک', type: string}
            phone: {description: تلفن, type: string}
            firstName: {description: نام, type: string}
            lastName: {description: 'نام خانوادگی', type: string}
            businessName: {description: 'نام کسب و کار', type: string}
            nationalId: {description: 'کد ملی/شماره اقتصادی', type: string}
            isBusiness: {description: 'حقوقی = true, حقیقی = false', type: string}
    ListCountViewModel:
        type: object
        properties:
            count: {format: int32, type: integer}
    AddressBookDetailViewModel:
        description: 'جزییات مشخصات مشتری'
        required:
            - code
            - firstName
            - lastName
        type: object
        properties:
            code: {description: 'کلید یکتای مشتری', type: string}
            userPhotoFileAddress: {description: 'پس از آپلود و دریافت کلید فایل را اینجا قرار دهید', type: string}
            userPhotoFileId: {description: 'لیست کلیدهای یکتا فایل تصویر پرسنلی', type: string}
            email: {description: 'پست الکترونیک', type: string, example: info@example.com}
            phone: {description: تلفن, type: string, example: '09110000000'}
            firstName: {description: نام, type: string, example: پوریا}
            lastName: {description: 'نام خانوادگی', type: string, example: منفرد}
            businessName: {description: 'نام کسب و کار', type: string, example: 'پی پینگ'}
            additionalInfo: {description: 'اطلاعات اضافی', type: string, example: 'او یک وکیل است'}
            memo: {description: یادآوری, type: string, example: 'در پی پینگ با ایشان آشنا شدم'}
            zipCode: {description: کدپستی, type: string, example: '46169696164'}
            state: {description: استان, type: string, example: تهران}
            city: {description: شهر, type: string, example: تهران}
            location: {description: آدرس, type: string, example: 'خیابان جمهوری'}
            isBusiness: {description: 'حقوقی = true, حقیقی = false', type: boolean, example: 'false'}
            nationalId: {description: 'کد ملی/شماره اقتصادی', type: string, example: '22266655591'}
    AddressBookEditViewModel:
        description: 'بروزرسانی مشتری'
        required:
            - code
            - firstName
            - lastName
        type: object
        properties:
            code: {description: 'کلید یکتای مشتری', type: string}
            userPhotoFileId: {description: 'پس از آپلود و دریافت کلید فایل را اینجا قرار دهید', type: string}
            email: {description: 'پست الکترونیک', type: string, example: info@example.com}
            phone: {description: تلفن, type: string, example: '09110000000'}
            firstName: {description: نام, type: string, example: پوریا}
            lastName: {description: 'نام خانوادگی', type: string, example: منفرد}
            businessName: {description: 'نام کسب و کار', type: string, example: 'پی پینگ'}
            additionalInfo: {description: 'اطلاعات اضافی', type: string, example: 'او یک وکیل است'}
            zipCode: {description: کدپستی, type: string, example: '46169696164'}
            state: {description: استان, type: string, example: تهران}
            city: {description: شهر, type: string, example: تهران}
            location: {description: آدرس, type: string, example: 'خیابان جمهوری'}
            memo: {description: 'متن یادآوری', type: string, example: 'به او مبلغی بدهکار می باشم'}
            isBusiness: {description: 'حقوقی = true, حقیقی = false', default: false, type: boolean, example: 'false'}
            nationalId: {description: کدملی, type: string, example: '22266655591'}
    AddressBookCreateViewModel:
        description: 'ثبت مشتری جدید'
        required:
            - firstName
            - lastName
        type: object
        properties:
            userPhotoFileId: {description: 'پس از آپلود و دریافت کلید فایل را اینجا قرار دهید', type: string}
            email: {description: 'پست الکترونیک', type: string, example: info@example.com}
            phone: {description: تلفن, type: string, example: '09110000000'}
            firstName: {description: نام, type: string, example: پوریا}
            lastName: {description: 'نام خانوادگی', type: string, example: منفرد}
            businessName: {description: 'نام کسب و کار', type: string, example: 'پی پینگ'}
            additionalInfo: {description: 'اطلاعات اضافی', type: string, example: 'او یک وکیل است'}
            zipCode: {description: کدپستی, type: string, example: '46169696164'}
            state: {description: استان, type: string, example: تهران}
            city: {description: شهر, type: string, example: تهران}
            location: {description: آدرس, type: string, example: 'خیابان جمهوری'}
            memo: {description: 'متن یادآوری', type: string, example: 'به او مبلغی بدهکار می باشم'}
            isBusiness: {description: 'حقوقی = true, حقیقی = false', default: false, type: boolean, example: 'false'}
            nationalId: {description: کدملی, type: string, example: '22266655591'}
    InvoiceDashboardReportViewModel:
        description: 'گزارش لیست مبلغ کل فاکتور ها به تفکیک وضعیت'
        type: object
        properties:
            draftAmount: {format: double, description: 'جمع پیش نویش', type: number}
            paidAmount: {format: double, description: 'جمع پرداخت شده', type: number}
            unpaidAmount: {format: double, description: 'جمع در انتظار پرداخت', type: number}
            expiredAmount: {format: double, description: 'جمع معوق شده', type: number}
            cancelAmount: {format: double, description: 'جمع لغو شده', type: number}
            draftAmountStr: {description: 'جمع پیش نویش', type: string}
            paidAmountStr: {description: 'جمع پرداخت شده', type: string}
            unpaidAmountStr: {description: 'جمع در انتظار پرداخت', type: string}
            expiredAmountStr: {description: 'جمع معوق شده', type: string}
            cancelAmountStr: {description: 'جمع لغو شده', type: string}
    ScheduleInvoiceWithChilds:
        description: 'جزییات کامل فاکتور زمابندی شده'
        type: object
        properties:
            parentInvoice: {$ref: '#/definitions/InvoiceDetailViewModel', description: 'فاکتور زمانبندی والد'}
            childInvoices: {description: 'فاکتورهای ساخته شده توسط فاکتور زمابندی والد', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceDetailViewModel'}}
    InvoiceDetailViewModel:
        description: 'جزییات فاکتور'
        type: object
        properties:
            code: {description: 'کلید یکتای فاکتور', type: string}
            parentCode: {description: 'کلید والد بودن فاکتور', type: string}
            paymentCode: {description: 'کد یکتای پرداخت', type: string}
            ccToes: {description: 'لیست ایمیل', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToDetailViewModel'}}
            billToes: {description: 'لیست مشتری', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToDetailViewModel'}}
            status: {format: int32, description: "وضعیت فاکتور:\r\n0 = پیش نویس\r\n1 = در انتظار پرداخت\r\n2 = پرداخت شد\r\n3 = معوق\r\n4 = لغو شده\r\n5 = همه", enum: [0, 1, 2, 3, 4, 5], type: integer}
            paidManualDescription: {description: 'شرح پرداخت دستی', type: string}
            saveToTemplate: {description: 'ذخیره به عنوان قالب فاکتور', type: boolean}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', type: integer}
            invoiceTitle: {description: 'عنوان فاکتور', type: string}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید', type: string}
            payedDateTime: {format: date-time, description: 'تاریخ پرداخت', type: string}
            canceledDateTime: {format: date-time, description: 'تاریخ لغو', type: string}
            subTotal: {format: double, description: 'جمع مبلغ پرداختی آیتم های مالی', type: number}
            itemsDiscountAmount: {format: double, description: 'جمع مبلغ تخفیف آیتم های مالی', type: number}
            totalDiscountAmount: {format: double, description: 'مبلغ تخفیف به کل فاکتور', type: number}
            totalDiscountPercent: {format: int32, description: 'درصد تخفیف به کل فاکتور', type: integer}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            sumDiscountAmount: {format: double, description: 'جمع کل تخفیف اعمال شده روی فاکتور', type: number}
            totalTaxtionAmount: {format: double, description: 'مبلغ مالیات', type: number}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            total: {format: double, description: 'مبلغ کل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', type: string}
            memo: {description: 'متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', type: string}
            invoiceSchulder: {$ref: '#/definitions/InvoiceSchulderDetailViewModel', description: 'ارسال زماندار که رابطه (یک به یک) یا (یک به صفر) دارد'}
            invoiceItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceItemDetailViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            attachFileIds: {description: 'لیست کلید یکتای فایل های ضمیمه', uniqueItems: false, type: array, items: {type: string}}
            attachFileAddresses: {description: 'لیست آدرس فایل های ضمیمه', uniqueItems: false, type: array, items: {type: string}}
            qrCodeFileName: {description: 'آدرس تصویر بارکد فاکتور', type: string}
    InvoiceCcToDetailViewModel:
        description: CC
        type: object
        properties:
            emailAddress: {description: 'آدرس ایمیل', type: string}
    InvoiceBillToDetailViewModel:
        description: 'مشتری یا پرداخت کننده'
        type: object
        properties:
            addressBook: {$ref: '#/definitions/AddressBookDetailViewModel', description: 'مشخصات مشتری یا پرداخت کننده'}
    InvoiceSchulderDetailViewModel:
        description: 'جزییات اطلاعات ساخت زمانبندی فاکتور'
        type: object
        properties:
            repeat: {format: int32, description: 'تکرار در هر X روز/هفته/ماه/سال', type: integer}
            schulderType: {format: int32, description: "نوع زمانبندی:\r\n0 = روزانه\r\n1 = هفتگی\r\n2 = ماهانه\r\n3 = سالانه", enum: [0, 1, 2, 3], type: integer}
            dueType: {format: int32, description: "نوع پایان زمانبندی:\r\n0 = پس از ساخت X فاکتور\r\n1 = پایان دادن به ساخت فاکتور در تاریخ X\r\n2 = ساخت نامحدود فاکتور", enum: [0, 1, 2], type: integer}
            endValue: {description: 'تعداد/تاریخ پایان، تولید فاکتور', type: string}
            dueDateAfterHowManyDay: {format: int32, description: 'سررسید بعد از X روز', type: integer}
            invoiceSubSchulders: {description: 'لیست دستور ساخت فاکتورهای زمانبندی شده و وضعیت آن ها', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceSubSchulderDetailViewModel'}}
    InvoiceItemDetailViewModel:
        description: 'جزییات آیتم مالی فاکتور'
        type: object
        properties:
            code: {description: 'کد یکتا', type: string}
            name: {description: عنوان, type: string}
            description: {description: توضیحات, type: string}
            quantity: {format: int32, description: تعداد, type: integer}
            discountType: {format: int32, description: "نوع تخفیف:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            discountPercent: {format: int32, description: 'درصد تخفیف', type: integer}
            discountAmount: {format: double, description: 'مبلغ تخفیف', type: number}
            tax: {description: 'دارای مالیات = true, نداشتن مالیات = false', type: boolean}
            taxRate: {format: int32, description: 'مقدار درصد مالیات', type: integer}
            price: {format: double, description: 'مبلغ فی', type: number}
            totalPrice: {format: double, description: 'مبلغ فی - مبلغ تخفیف) * تعداد = مجموع)', type: number}
            amount: {format: double, description: 'مجموع + مالیات = پرداختی', type: number}
    InvoiceSubSchulderDetailViewModel:
        description: 'جزییات دستور ساخت فاکتورهای زمانبندی شده و وضعیت آن ها'
        type: object
        properties:
            dueDate: {format: date-time, description: 'تاریخ سررسید فاکتوری که باید ساخته شود', type: string}
            mustBeCreateInDateTime: {format: date-time, description: 'تاریخ روزی که فاکتور باید ساخته شود', type: string}
            deActiveDateTime: {format: date-time, description: 'تاریخ غیر فعال شدن ساخت فاکتور', type: string}
            isInvoiceCreated: {description: 'ساخته شد = true, در صف انتظار= false', type: boolean}
            isActive: {description: 'فعال بود = true, غیر فعال = false', type: boolean}
            invoiceCode: {description: 'کلید یکتا فاکتور ساخته شده', type: string}
    InvoiceListItemViewModel:
        type: object
        properties:
            code: {description: 'کلید یکتای فاکتور', type: string}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', type: integer}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت فاکتور', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید فاکتور', type: string}
            payedDateTime: {format: date-time, description: 'تاریخ پرداخت', type: string}
            canceledDateTime: {format: date-time, description: 'تاریخ لغو', type: string}
            invoiceTitle: {description: عنوان, type: string}
            status: {format: int32, description: "وضعیت فاکتور\r\n0 = پیش نویس\r\n1 = در انتظار پرداخت\r\n2 = پرداخت شد\r\n3 = معوق\r\n4 = لغو شده\r\n5 = همه", enum: [0, 1, 2, 3, 4, 5], type: integer}
            total: {format: double, description: 'مبلغ نهایی یا قابل پرداخت', type: number}
            ccToes: {description: 'دریافت کننده های ایمیلی', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToListItemViewModel'}}
            billToes: {description: 'دریافت کننده ها - مشتریان', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToListItemViewModel'}}
    InvoiceCcToListItemViewModel:
        description: CC
        type: object
        properties:
            emailAddress: {description: 'آدرس ایمیل', type: string}
    InvoiceBillToListItemViewModel:
        description: 'مشتری یا پرداخت کننده'
        type: object
        properties:
            addressBook: {$ref: '#/definitions/AddressBookListItemViewModel', description: 'مشخصات مشتری یا پرداخت کننده'}
    InvoiceEditViewModel:
        description: 'بروزرسانی فاکتور ساده'
        required:
            - code
        type: object
        properties:
            code: {description: 'کلید یکتای فاکتور', type: string}
            ccToes: {description: 'ایمیل ها', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToCreateOrUpdateViewModel'}}
            billToes: {description: مشتریان, uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToCreateOrUpdateViewModel'}}
            createStatus: {format: int32, description: "نوع ثبت:\r\n0 = ذخیره در پیش نویس\r\n1 = ارسال\r\n2 = دستی پرداخت شد", enum: [0, 1, 2], type: integer}
            paidManualDescription: {description: 'شرح پرداخت دستی', default: "", type: string}
            saveToTemplate: {description: 'ذخیره به عنوان قالب', default: false, type: boolean}
            templateCode: {description: 'کد یکتای قالب فاکتور', default: "", type: string}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', type: integer}
            invoiceTitle: {description: 'عنوان فاکتور', type: string}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید- تاریخی که باید پرداخت صورت پذیرد', type: string}
            totalDiscountValue: {format: double, description: 'تخفیف به کل فاکتور', type: number}
            totalDiscountType: {format: int32, description: "نوع تخفیف به مبلغ یا درصد\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            notes: {description: 'متن جهت ارسال به دریافت کننده', default: "", type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت ارسال به دریافت کننده', default: "", type: string}
            memo: {description: 'ایجاد یک متن دلخواه جهت یادآوری فقط برای کاربر ثبت کننده', default: "", type: string}
            invoiceItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceItemCreateViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            attachmentsIds: {description: 'کلید(های) یکتا دریافت شده از سرویس آپلود به صورت آرایه از رشته ها قرار دهید', uniqueItems: false, type: array, items: {type: string}}
            isDevicePayment: {description: 'ثبت فاکتور بدون مشتری = true, با مشتری = false', default: false, type: boolean}
    InvoiceCcToCreateOrUpdateViewModel:
        description: CC
        type: object
        properties:
            emailAddress: {description: 'آدرس ایمیل', default: "", type: string}
    InvoiceBillToCreateOrUpdateViewModel:
        description: 'ثبت یا بروزرسانی مشتری'
        type: object
        properties:
            addressBookCode: {description: 'کلید یکتای مشتری', default: "", type: string}
    InvoiceItemCreateViewModel:
        description: 'ثبت آیتم مالی فاکتور'
        type: object
        properties:
            code: {description: 'کلید یکتا', default: "", type: string}
            name: {description: عنوان, default: "", type: string}
            description: {description: توضیحات, default: "", type: string}
            tax: {description: 'دارای مالیات = true, نداشتن مالیات = false', default: false, type: boolean}
            quantity: {format: int32, description: تعداد, default: 1, type: integer}
            discountValue: {format: double, description: 'مقدار تخفیف', type: number}
            discountType: {format: int32, description: "نوع تخفیف:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            discountCouponCode: {description: 'کد یکتا تخفیف از بخش تخفیف ها', type: string}
            price: {format: double, description: 'مبلغ فی', default: 0, type: number}
    InvoiceSendByTemplate:
        description: 'ثبت فاکتور با استفاده از قالب فاکتور'
        required:
            - templateCode
        type: object
        properties:
            templateCode: {description: 'کلید یکتای قالب فاکتور', type: string}
            invoiceTitle: {description: 'عنوان فاکتور', type: string}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', default: 1, type: integer}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید- تاریخی که باید پرداخت صورت پذیرد', type: string}
            ccToes: {description: 'لیست آدرس ایمیل', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToCreateOrUpdateViewModel'}}
            billToes: {description: 'لیست مشتری', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToCreateOrUpdateViewModel'}}
            isDevicePayment: {description: 'ثبت فاکتور بدون مشتری = true, با مشتری = false', default: false, type: boolean}
    InvoiceSendByTemplateSimple:
        description: 'ثبت فاکتور با استفاده از قالب فاکتور'
        required:
            - templateCode
        type: object
        properties:
            templateCode: {description: 'کلید یکتای قالب فاکتور', type: string}
            emailAddresses: {description: 'لیست آدرس ایمیل', uniqueItems: false, type: array, items: {type: string}}
            addressBook: {$ref: '#/definitions/AddressBookCreateViewModel', description: 'مشخصات مشتری'}
    InvoiceCreateViewModel:
        description: 'ثبت فاکتور ساده'
        type: object
        properties:
            ccToes: {description: 'ایمیل ها', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToCreateOrUpdateViewModel'}}
            billToes: {description: مشتریان, uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToCreateOrUpdateViewModel'}}
            createStatus: {format: int32, description: "نوع ثبت:\r\n0 = ذخیره در پیش نویس\r\n1 = ارسال\r\n2 = دستی پرداخت شد", enum: [0, 1, 2], type: integer}
            paidManualDescription: {description: 'شرح پرداخت دستی', default: "", type: string}
            saveToTemplate: {description: 'ذخیره به عنوان قالب', default: false, type: boolean}
            templateCode: {description: 'کد یکتای قالب فاکتور', default: "", type: string}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', type: integer}
            invoiceTitle: {description: 'عنوان فاکتور', type: string}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید- تاریخی که باید پرداخت صورت پذیرد', type: string}
            totalDiscountValue: {format: double, description: 'تخفیف به کل فاکتور', type: number}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', default: "", type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', default: "", type: string}
            memo: {description: 'ایجاد یک متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', default: "", type: string}
            invoiceItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceItemCreateViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            attachmentsIds: {description: 'کلید(های) یکتا دریافت شده از سرویس آپلود به صورت آرایه از رشته ها قرار دهید', uniqueItems: false, type: array, items: {type: string}}
            isDevicePayment: {description: 'ثبت فاکتور بدون مشتری = true, با مشتری = false', default: false, type: boolean}
    InvoiceCreateScheduleViewModel:
        description: 'ثبت فاکتور زمانبندی شده'
        type: object
        properties:
            ccToes: {description: 'ایمیل ها', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToCreateOrUpdateViewModel'}}
            billToes: {description: مشتریان, uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToCreateOrUpdateViewModel'}}
            createStatus: {format: int32, description: "نوع ثبت:\r\n1 = ارسال\r\n2 = دستی پرداخت شد", enum: [1, 2], type: integer}
            paidManualDescription: {description: 'شرح پرداخت دستی', default: "", type: string}
            saveToTemplate: {description: 'ذخیره به عنوان قالب', default: false, type: boolean}
            templateCode: {description: 'کد یکتای قالب فاکتور', default: "", type: string}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', type: integer}
            invoiceTitle: {description: 'عنوان فاکتور', type: string}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید- تاریخی که باید پرداخت صورت پذیرد', type: string}
            totalDiscountValue: {format: double, description: 'تخفیف به کل فاکتور', type: number}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', default: "", type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', default: "", type: string}
            memo: {description: 'ایجاد یک متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', default: "", type: string}
            invoiceSchulder: {$ref: '#/definitions/InvoiceSchulderCreateOrUpdateViewModel', description: 'ارسال زماندار که رابطه (یک به یک) یا (یک به صفر) دارد'}
            invoiceItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceItemCreateViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            attachmentsIds: {description: 'کلید(های) یکتا دریافت شده از سرویس آپلود به صورت آرایه از رشته ها قرار دهید', uniqueItems: false, type: array, items: {type: string}}
            isDevicePayment: {description: 'ثبت فاکتور بدون مشتری = true, با مشتری = false', default: false, type: boolean}
    InvoiceSchulderCreateOrUpdateViewModel:
        description: 'ثبت اطلاعات زمانبندی فاکتور'
        type: object
        properties:
            repeat: {format: int32, description: 'تکرار در هر X روز/هفته/ماه/سال', default: 1, type: integer}
            schulderType: {format: int32, description: "نوع زمانبندی:\r\n0 = روزانه\r\n1 = هفتگی\r\n2 = ماهانه\r\n3 = سالانه", default: 0, enum: [0, 1, 2, 3], type: integer}
            dueType: {format: int32, description: "نوع پایان زمانبندی:\r\n0 = پس از ساخت X فاکتور\r\n1 = پایان دادن به ساخت فاکتور در تاریخ X\r\n2 = ساخت نامحدود فاکتور", default: 0, enum: [0, 1, 2], type: integer}
            endValue: {description: 'تعداد/تاریخ پایان، تولید فاکتور', default: '1', type: string}
            dueDateAfterHowManyDay: {format: int32, description: 'سررسید بعد از X روز', default: 2, type: integer}
    InvoicePdfResponseViewModel:
        description: 'مشخصات بازگشت درخواست فایل پی دی اف فاکتور'
        type: object
        properties:
            success: {description: 'موفقیت آمیز بودن درخواست = true, ناموفق بودن = false', type: boolean}
            message: {description: 'پیام خطا یا موفقیت', type: string}
            fileAddress: {description: 'آدرس فایل', type: string}
    InvoiceCancelRequest:
        required:
            - code
        type: object
        properties:
            code: {type: string}
            previewKey: {type: string}
    InvoiceCancelResponse:
        description: 'بازگشت مشخصات درخواست لغو فاکتور'
        type: object
        properties:
            code: {description: 'کلید یکتا فاکتور', type: string}
            message: {description: 'پیام نتیجه انجام درخواست', type: string}
    InvoiceSendReminderResponseViewModel:
        description: 'بازگشت مشخصات ارسال یادآوری فاکتور'
        type: object
        properties:
            success: {description: 'موفقیت آمیز بودن درخواست = true, ناموفق بودن = false', type: boolean}
            message: {description: 'پیام خطا یا موفقیت', type: string}
            modelCode: {description: 'کلید یکتا فاکتور', type: string}
    InvoiceSendInvoiceResponseViewModel:
        description: 'بازگشت مشخصات درخواست ارسال فاکتور'
        type: object
        properties:
            success: {description: 'موفقیت آمیز بودن درخواست = true, ناموفق بودن = false', type: boolean}
            message: {description: 'پیام خطا یا موفقیت', type: string}
            modelCode: {description: 'کلید یکتا', type: string}
    InvoiceSetCustomerRequestViewModel:
        type: object
        properties:
            invoiceCode: {type: string}
            customer: {$ref: '#/definitions/AddressBookCreateViewModel'}
    InvoiceConfirmPaymentResponseViewModel:
        type: object
        properties:
            success: {type: boolean}
            message: {type: string}
            modelCode: {type: string}
            refId: {type: string}
            previewKey: {type: string}
            invoice: {$ref: '#/definitions/InvoiceInPublicShow'}
    InvoiceInPublicShow:
        type: object
        properties:
            previewKey: {type: string}
            invoice: {$ref: '#/definitions/InvoicePublicDetailViewModel'}
            ownerInfo: {$ref: '#/definitions/UserInfoInPublicShow'}
    InvoicePublicDetailViewModel:
        description: 'جزییات فاکتور به صورت عمومی'
        type: object
        properties:
            payedDateTime: {format: date-time, description: 'تاریخ پرداخت', type: string}
            canceledDateTime: {format: date-time, description: 'تاریخ لغو', type: string}
            expiredDateTime: {format: date-time, description: 'تاریخ معوق شدن', type: string}
            code: {description: 'کلید یکتای فاکتور', type: string}
            parentCode: {description: 'کلید والد بودن فاکتور', type: string}
            paymentCode: {description: 'کد یکتای پرداخت', type: string}
            ccToes: {description: 'لیست ایمیل', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceCcToDetailViewModel'}}
            billToes: {description: 'لیست مشتری', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceBillToDetailViewModel'}}
            status: {format: int32, description: "وضعیت فاکتور:\r\n0 = پیش نویس\r\n1 = در انتظار پرداخت\r\n2 = پرداخت شد\r\n3 = معوق\r\n4 = لغو شده\r\n5 = همه", enum: [0, 1, 2, 3, 4, 5], type: integer}
            paidManualDescription: {description: 'شرح پرداخت دستی', type: string}
            saveToTemplate: {description: 'ذخیره به عنوان قالب فاکتور', type: boolean}
            invoiceNumber: {format: int64, description: 'شماره فاکتور', type: integer}
            invoiceTitle: {description: 'عنوان فاکتور', type: string}
            invoiceDateTime: {format: date-time, description: 'تاریخ ثبت', type: string}
            dueDate: {format: date-time, description: 'تاریخ سررسید', type: string}
            subTotal: {format: double, description: 'جمع مبلغ پرداختی آیتم های مالی', type: number}
            itemsDiscountAmount: {format: double, description: 'جمع مبلغ تخفیف آیتم های مالی', type: number}
            totalDiscountAmount: {format: double, description: 'مبلغ تخفیف به کل فاکتور', type: number}
            totalDiscountPercent: {format: int32, description: 'درصد تخفیف به کل فاکتور', type: integer}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            sumDiscountAmount: {format: double, description: 'جمع کل تخفیف اعمال شده روی فاکتور', type: number}
            totalTaxtionAmount: {format: double, description: 'مبلغ مالیات', type: number}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            total: {format: double, description: 'مبلغ کل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', type: string}
            memo: {description: 'متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', type: string}
            invoiceSchulder: {$ref: '#/definitions/InvoiceSchulderDetailViewModel', description: 'ارسال زماندار که رابطه (یک به یک) یا (یک به صفر) دارد'}
            invoiceItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceItemDetailViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            attachFileIds: {description: 'لیست کلید یکتای فایل های ضمیمه', uniqueItems: false, type: array, items: {type: string}}
            attachFileAddresses: {description: 'لیست آدرس فایل های ضمیمه', uniqueItems: false, type: array, items: {type: string}}
            qrCodeFileName: {description: 'آدرس تصویر بارکد فاکتور', type: string}
    UserInfoInPublicShow:
        type: object
        properties:
            name: {type: string}
            profilePicture: {type: string}
            isBusiness: {type: boolean}
            verifyType: {format: int32, type: integer}
            socials: {$ref: '#/definitions/SocialUserInfoExtraViewModel'}
    SocialUserInfoExtraViewModel:
        type: object
        properties:
            site: {type: string}
            instagram: {type: string}
            telegram: {type: string}
            twitter: {type: string}
            allSocialIsNull: {type: boolean, readOnly: true}
    InvoiceTemplateListItemViewModel:
        description: 'مشخصات قالب فاکتور'
        type: object
        properties:
            code: {description: 'کلید یکتا', type: string}
            templateName: {description: عنوان, type: string}
            hasSchulder: {description: 'دارای زمانبندی = true, بدون زمانبندی = false', type: boolean}
    InvoiceTemplateDetailViewModel:
        description: 'جزییات قالب فاکتور'
        type: object
        properties:
            code: {description: 'کد یکتا', type: string}
            templateName: {description: عنوان, type: string}
            subTotal: {format: double, description: 'جمع مبلغ پرداختی آیتم های مالی', type: number}
            itemsDiscountAmount: {format: double, description: 'جمع مبلغ تخفیف آیتم های مالی', type: number}
            totalDiscountAmount: {format: double, description: 'جمع مبلغ تخفیف آیتم های مالی', type: number}
            totalDiscountPercent: {format: int32, description: 'درصد تخفیف به کل فاکتور', type: integer}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            sumDiscountAmount: {format: double, description: 'جمع کل تخفیف اعمال شده روی فاکتور', type: number}
            totalTaxtionAmount: {format: double, description: 'مبلغ مالیات', type: number}
            shipping: {format: double, description: 'مبلغ حمل و نقل', type: number}
            total: {format: double, description: 'مبلغ کل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', type: string}
            memo: {description: 'متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', type: string}
            invoiceTemplateItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceTemplateItemIndexViewModel'}}
            invoiceSchulder: {$ref: '#/definitions/InvoiceTemplateSchulderIndexViewModel', description: 'ارسال زماندار که رابطه (یک به یک) یا (یک به صفر) دارد'}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', type: boolean}
            attachFileIds: {description: 'لیست کلید یکتای فایل های ضمیمه', uniqueItems: false, type: array, items: {type: string}}
            attachFileAddresses: {description: 'لیست آدرس فایل های ضمیمه', uniqueItems: false, type: array, items: {type: string}}
    InvoiceTemplateItemIndexViewModel:
        description: 'جزییات آیتم مالی قالب فاکتور'
        type: object
        properties:
            code: {description: 'کد یکتا', type: string}
            name: {description: عنوان, type: string}
            description: {description: توضیحات, type: string}
            quantity: {format: int32, description: تعداد, type: integer}
            discountType: {format: int32, description: "نوع تخفیف:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            discountPercent: {format: int32, description: 'درصد تخفیف', type: integer}
            discountAmount: {format: double, description: 'مبلغ تخفیف', type: number}
            tax: {description: 'دارای مالیات = true, نداشتن مالیات = false', type: boolean}
            taxRate: {format: int32, description: 'مقدار درصد مالیات', type: integer}
            price: {format: double, description: 'مبلغ فی', type: number}
            totalPrice: {format: double, description: 'مبلغ فی - مبلغ تخفیف) * تعداد = مجموع)', type: number}
            amount: {format: double, description: 'مجموع + مالیات = پرداختی', type: number}
    InvoiceTemplateSchulderIndexViewModel:
        description: 'جزییات مشخصات ساخت زمانبندی قالب فاکتور'
        type: object
        properties:
            repeat: {format: int32, description: 'تکرار در هر X روز/هفته/ماه/سال', default: 1, type: integer}
            schulderType: {format: int32, description: "نوع زمانبندی:\r\n0 = روزانه\r\n1 = هفتگی\r\n2 = ماهانه\r\n3 = سالانه", default: 0, enum: [0, 1, 2, 3], type: integer}
            dueType: {format: int32, description: "نوع پایان زمانبندی:\r\n0 = پس از ساخت X فاکتور\r\n1 = پایان دادن به ساخت فاکتور در تاریخ X\r\n2 = ساخت نامحدود فاکتور", default: 0, enum: [0, 1, 2], type: integer}
            endValue: {description: 'تعداد/تاریخ پایان، تولید فاکتور', default: '1', type: string}
            dueDateAfterHowManyDay: {format: int32, description: 'سررسید بعد از X روز', default: 2, type: integer}
    InvoiceTemplateEditViewModel:
        description: 'بروزرسانی قالب فاکتور'
        required:
            - code
            - templateName
        type: object
        properties:
            code: {description: 'کلید یکتای فاکتور', default: "", type: string}
            templateName: {description: عنوان, default: "", type: string}
            totalDiscountValue: {format: int32, description: 'تخفیف به کل فاکتور', type: integer}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', default: "", type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', default: "", type: string}
            memo: {description: 'ایجاد یک متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', default: "", type: string}
            invoiceSchulder: {$ref: '#/definitions/InvoiceTemplateSchulderCreateOrUpdateViewModel', description: 'ارسال زماندار که رابطه (یک به یک) یا (یک به صفر) دارد'}
            invoiceTemplateItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceTemplateItemCreateViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            attachmentsIds: {description: 'کلید(های) یکتا دریافت شده از سرویس آپلود به صورت آرایه از رشته ها قرار دهید', uniqueItems: false, type: array, items: {type: string}}
    InvoiceTemplateSchulderCreateOrUpdateViewModel:
        description: 'ثبت اطلاعات زمانبندی قالب فاکتور'
        type: object
        properties:
            repeat: {format: int32, description: 'تکرار در هر X روز/هفته/ماه/سال', default: 1, type: integer}
            schulderType: {format: int32, description: "نوع زمانبندی:\r\n0 = روزانه\r\n1 = هفتگی\r\n2 = ماهانه\r\n3 = سالانه", default: 0, enum: [0, 1, 2, 3], type: integer}
            dueType: {format: int32, description: "نوع پایان زمانبندی:\r\n0 = پس از ساخت X فاکتور\r\n1 = پایان دادن به ساخت فاکتور در تاریخ X\r\n2 = ساخت نامحدود فاکتور", default: 0, enum: [0, 1, 2], type: integer}
            endValue: {description: 'تعداد/تاریخ پایان، تولید فاکتور', default: '1', type: string}
            dueDateAfterHowManyDay: {format: int32, description: 'سررسید بعد از X روز', default: 2, type: integer}
    InvoiceTemplateItemCreateViewModel:
        description: 'ثبت آیتم مالی قالب فاکتور'
        type: object
        properties:
            code: {description: 'کلید یکتا', default: "", type: string}
            name: {description: عنوان, default: "", type: string}
            description: {description: توضیحات, default: "", type: string}
            tax: {description: 'دارای مالیات = true, نداشتن مالیات = false', default: false, type: boolean}
            quantity: {format: int32, description: تعداد, default: 1, type: integer}
            discountValue: {format: double, description: 'مقدار تخفیف', type: number}
            discountType: {format: int32, description: "نوع تخفیف:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            discountCouponCode: {description: 'کد یکتا تخفیف از بخش تخفیف ها', type: string}
            price: {format: double, description: 'مبلغ فی', default: 0, type: number}
    InvoiceTemplateCreateViewModel:
        description: 'قالب فاکتور جدید'
        required:
            - templateName
        type: object
        properties:
            templateName: {description: عنوان, default: "", type: string}
            totalDiscountValue: {format: int32, description: 'تخفیف به کل فاکتور', type: integer}
            totalDiscountType: {format: int32, description: "نوع تخفیف به کل فاکتور:\r\n0 = مبلغ\r\n1 = درصد", enum: [0, 1], type: integer}
            shipping: {format: double, description: 'هزینه حمل و نقل', type: number}
            notes: {description: 'پیامی جهت نمایش به پرداخت کننده', default: "", type: string}
            termsAndConditions: {description: 'متن شرایط و قوانین جهت نمایش به پرداخت کننده', default: "", type: string}
            memo: {description: 'ایجاد یک متن دلخواه جهت یادآوری فقط برای صادر کننده فاکتور', default: "", type: string}
            invoiceSchulder: {$ref: '#/definitions/InvoiceTemplateSchulderCreateOrUpdateViewModel', description: 'ارسال زماندار که رابطه (یک به یک) یا (یک به صفر) دارد'}
            invoiceTemplateItems: {description: 'آیتم های مالی فاکتور', uniqueItems: false, type: array, items: {$ref: '#/definitions/InvoiceTemplateItemCreateViewModel'}}
            isSendAttachmentsAfterPayment: {description: 'نمایش فایل های ضمیمه به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendNotesAndTermsAfterPayment: {description: 'نمایش پیام به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            isSendTermsAfterPayment: {description: 'نمایش متن قوانین و مقررات به پرداخت کننده پس از پرداخت موفق = true, نمایش در قبل و بعد از پرداخت = false', default: false, type: boolean}
            attachmentsIds: {description: 'کلید(های) یکتا دریافت شده از سرویس آپلود به صورت آرایه از رشته ها قرار دهید', uniqueItems: false, type: array, items: {type: string}}
    ServiceViewModel:
        type: object
        properties:
            userId: {format: int32, type: integer}
            serviceType: {format: int32, enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], type: integer}
    BaseIntegration:
        type: object
        properties:
            userId: {format: int32, type: integer}
            createDate: {format: date-time, type: string}
            serviceType: {format: int32, enum: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11], type: integer}
    IdentityResult:
        type: object
        properties:
            succeeded: {type: boolean, readOnly: true}
            errors: {type: array, items: {$ref: '#/definitions/IdentityError'}, readOnly: true}
    IdentityError:
        type: object
        properties:
            code: {type: string}
            description: {type: string}
    RegisterWithClient:
        required:
            - username
            - email
            - password
            - phoneNumber
            - firstName
            - lastName
            - birthDay
            - nationalCode
            - cardNumber
            - shaba
        type: object
        properties:
            username: {type: string}
            email: {type: string}
            password: {type: string}
            phoneNumber: {type: string}
            firstName: {type: string}
            lastName: {type: string}
            birthDay: {format: date-time, type: string}
            nationalCode: {type: string}
            cardNumber: {type: string}
            shaba: {type: string}
    PersonalInfoViewModel:
        type: object
        properties:
            email: {type: string}
            firstName: {type: string}
            lastName: {type: string}
            nationalCode: {type: string}
            birthday: {format: date-time, type: string}
    UpdateUserCategoryVm:
        type: object
        properties:
            businessDescription: {type: string}
            subCategoryId: {format: int32, type: integer}
    AddBusinessinfoVm:
        type: object
        properties:
            businessName: {type: string}
            businessDescription: {type: string}
            isBusinessMoreThan6Mil: {type: boolean}
            isOfficialSubmited: {type: boolean}
            bNationalCode: {type: string}
            sabtNumber: {type: string}
            economicCode: {type: string}
    AddPersonalinfoVm:
        type: object
        properties:
            firstName: {type: string}
            lastName: {type: string}
            phoneNumber: {type: string}
            localPhone: {type: string}
            birthDate: {format: date-time, type: string}
            nationalcode: {type: string}
            state: {type: string}
            city: {type: string}
            address: {type: string}
            postalCode: {type: string}
    UpdatePersonalinfoVm:
        type: object
        properties:
            firstName: {type: string}
            lastName: {type: string}
            birthDate: {format: date-time, type: string}
            nationalcode: {type: string}
    BankViewModel:
        type: object
        properties:
            shaba: {type: string}
            shabaVerifyed: {type: boolean}
    AddPhoneNumberViewModel:
        required:
            - number
        type: object
        properties:
            number: {type: string}
            isVerifyed: {type: boolean}
    AddLocalPhoneNumberViewModel:
        required:
            - localPhone
        type: object
        properties:
            localPhone: {maxLength: 11, minLength: 11, type: string}
    EditLocalInfoesViewModel:
        required:
            - state
            - city
            - address
            - postalCode
        type: object
        properties:
            state: {type: string}
            city: {type: string}
            address: {type: string}
            postalCode: {type: string}
    SocialUserExtraViewModel:
        type: object
        properties:
            businessDescription: {type: string}
            site: {type: string}
            instagram: {type: string}
            telegram: {type: string}
            twitter: {type: string}
            allSocialIsNull: {type: boolean, readOnly: true}
    CouponCreateViewModel:
        type: object
        properties:
            name: {type: string}
            userCouponCode: {type: string}
            type: {format: int32, enum: [0, 1], type: integer}
            amount: {format: int32, type: integer}
            redeemDate: {format: date-time, type: string}
            redeemTime: {type: string}
            maxRedemption: {format: int32, type: integer}
            isActive: {type: boolean}
            activeProductCode: {uniqueItems: false, type: array, items: {type: string}}
    CodeVM:
        type: object
        properties:
            code: {type: string}
    CouponEditViewModel:
        type: object
        properties:
            name: {type: string}
            userCouponCode: {type: string}
            type: {format: int32, enum: [0, 1], type: integer}
            amount: {format: int32, type: integer}
            code: {type: string}
            redeemDate: {format: date-time, type: string}
            redeemTime: {type: string}
            maxRedemption: {format: int32, type: integer}
            isActive: {type: boolean}
            activeProductCode: {uniqueItems: false, type: array, items: {type: string}}
    CouponDetailViewModel:
        type: object
        properties:
            name: {type: string}
            type: {format: int32, enum: [0, 1], type: integer}
            amount: {format: int32, type: integer}
            code: {type: string}
            redeemDate: {format: date-time, type: string}
            redeemTime: {type: string}
            maxRedemption: {format: int32, type: integer}
            isActive: {type: boolean}
            activeProductCode: {type: string}
            isArchived: {type: boolean}
            userCouponCode: {type: string}
            buyerCounts: {format: int32, type: integer}
            buyerSum: {format: int32, type: integer}
    CouponListItemViewModel:
        type: object
        properties:
            name: {type: string}
            type: {format: int32, enum: [0, 1], type: integer}
            amount: {format: int32, type: integer}
            code: {type: string}
            isActive: {type: boolean}
            activeProductCode: {type: string}
            activeProductName: {uniqueItems: false, type: array, items: {type: string}}
            userCouponCode: {type: string}
            amountDisplay: {type: string, readOnly: true}
    CountVM:
        type: object
        properties:
            count: {format: int32, type: integer}
    BuyerDetailsViewModel:
        type: object
        properties:
            code: {type: string}
            amount: {format: int32, type: integer}
            addressLine: {type: string}
            postalCode: {type: string}
            firstName: {type: string}
            lastName: {type: string}
            email: {type: string}
            city: {type: string}
            phone: {type: string}
            customDescription: {type: string}
            permanLinkCode: {type: string}
            productInfo: {$ref: '#/definitions/ProductInfo'}
            couponCode: {type: string}
            productCode: {type: string}
            campaignCode: {type: string}
            isPaid: {type: boolean}
            payerId: {format: int32, type: integer}
            invoiceNo: {type: string}
            payDate: {format: date-time, type: string}
            fullName: {type: string, readOnly: true}
    ProductInfo:
        type: object
        properties:
            code: {type: string}
            title: {type: string}
            description: {type: string}
            realAmount: {format: int32, type: integer}
    PayDirectVM:
        type: object
        properties:
            amount: {type: string}
            product: {$ref: '#/definitions/ProductFullDeatilViewModel'}
            userData: {$ref: '#/definitions/PUserData'}
            payCode: {type: string}
    ProductFullDeatilViewModel:
        type: object
        properties:
            code: {type: string}
            title: {type: string}
            description: {type: string}
            quantity: {format: int32, type: integer}
            unlimited: {type: boolean}
            userId: {format: int32, type: integer}
            amount: {format: int32, type: integer}
            defineAmountByUser: {type: boolean}
            isActive: {type: boolean}
            isArchived: {type: boolean}
            haveTax: {type: boolean}
            tax: {format: int32, type: integer, readOnly: true}
            imageLink: {type: string}
            imageId: {type: string}
            category: {$ref: '#/definitions/CategoryMinorDetailVM'}
    PUserData:
        type: object
        properties:
            name: {type: string}
            userName: {type: string}
            profilePicture: {type: string}
            isBusiness: {type: boolean}
            verifyType: {type: string}
            socials: {$ref: '#/definitions/PSocialUserExtraViewModel'}
            customFrontPay: {$ref: '#/definitions/CustomFrontPay'}
            maxPaymntAmount: {format: int32, type: integer}
    CategoryMinorDetailVM:
        type: object
        properties:
            code: {type: string}
            name: {type: string}
    PSocialUserExtraViewModel:
        type: object
        properties:
            site: {type: string}
            instagram: {type: string}
            telegram: {type: string}
            twitter: {type: string}
            allSocialIsNull: {type: boolean}
    CustomFrontPay:
        type: object
        properties:
            bgImage: {type: string}
            themeColor: {type: string}
            bgColor: {type: string}
            priceColor: {type: string}
            backImageType: {type: string}
    VerfyPermaVM:
        type: object
        properties:
            payCode: {type: string}
            clientRefId: {type: string}
            refId: {type: string}
    PayReportViewModel:
        type: object
        properties:
            product: {$ref: '#/definitions/ProductDetailViewModel'}
            permanentLink: {$ref: '#/definitions/PermanentDetailViewModel'}
            buyer: {$ref: '#/definitions/BuyerDetailsViewModel'}
            pdfLink: {type: string}
    ProductDetailViewModel:
        type: object
        properties:
            userId: {format: int32, type: integer}
            code: {type: string}
            title: {type: string}
            description: {type: string}
            amount: {format: int32, type: integer}
            defineAmountByUser: {type: boolean}
            quantity: {format: int32, type: integer}
            unlimited: {type: boolean}
            isActive: {type: boolean}
            isArchived: {type: boolean}
            haveTax: {type: boolean}
            imageLink: {type: string}
    PermanentDetailViewModel:
        type: object
        properties:
            code: {type: string}
            redirectPage: {type: string}
            getAddress: {type: boolean}
            userId: {format: int32, type: integer}
            mailerLiteListId: {type: string}
            smsText: {type: string}
            customDescriptionText: {type: string}
            isActive: {type: boolean}
            isArchived: {type: boolean}
            emailOption: {format: int32, enum: [0, 1, 2], type: integer}
            phoneOption: {format: int32, enum: [0, 1, 2], type: integer}
            nameOption: {format: int32, enum: [0, 1, 2], type: integer}
            customDesOption: {format: int32, enum: [0, 1, 2], type: integer}
            clientId: {type: string}
            clientRefId: {type: string}
            qrLink: {type: string}
            permanentType: {format: int32, enum: [0, 1], type: integer}
            buyerCounts: {format: int32, type: integer}
            buyerSum: {format: int32, type: integer}
    PayGetViewModel:
        type: object
        properties:
            emailOption: {format: int32, enum: [0, 1, 2], type: integer}
            phoneOption: {format: int32, enum: [0, 1, 2], type: integer}
            nameOption: {format: int32, enum: [0, 1, 2], type: integer}
            customDesOption: {format: int32, enum: [0, 1, 2], type: integer}
            customDescriptionText: {type: string}
            getAddress: {type: boolean}
            haveCoupon: {type: boolean}
            amount: {type: string}
            realAmount: {type: string}
            product: {$ref: '#/definitions/ProductFullDeatilViewModel'}
            userData: {$ref: '#/definitions/PUserData'}
    PermanentPaymentViewModel:
        type: object
        properties:
            productCode: {type: string}
            amount: {type: string}
            addressLine: {type: string}
            postalCode: {type: string}
            city: {type: string}
            firstName: {type: string}
            lastName: {type: string}
            email: {type: string}
            phone: {type: string}
            fullName: {type: string, readOnly: true}
            customDescription: {type: string}
            couponCode: {type: string}
    CouponViewModel:
        required:
            - couponCode
        type: object
        properties:
            amount: {format: int32, type: integer}
            couponCode: {pattern: '^[a-zA-Z0-9]+$', type: string}
            productCode: {type: string}
    CouponResultVM:
        type: object
        properties:
            result: {type: string}
            newAmount: {type: string}
            couponCode: {type: string}
            isSuccess: {type: boolean}
    PermanentCreateViewModel:
        type: object
        properties:
            code: {type: string}
            redirectPage: {type: string}
            getAddress: {type: boolean}
            mailerLiteListId: {type: string}
            smsText: {type: string}
            customDescriptionText: {type: string}
            emailOption: {format: int32, enum: [0, 1, 2], type: integer}
            phoneOption: {format: int32, enum: [0, 1, 2], type: integer}
            nameOption: {format: int32, enum: [0, 1, 2], type: integer}
            customDesOption: {format: int32, enum: [0, 1, 2], type: integer}
            clientId: {type: string}
            clientRefId: {type: string}
            permanentType: {format: int32, enum: [0, 1], type: integer}
    PermanentEditViewModel:
        type: object
        properties:
            code: {type: string}
            redirectPage: {type: string}
            getAddress: {type: boolean}
            mailerLiteListId: {type: string}
            smsText: {type: string}
            customDescriptionText: {type: string}
            isActive: {type: boolean}
            emailOption: {format: int32, enum: [0, 1, 2], type: integer}
            phoneOption: {format: int32, enum: [0, 1, 2], type: integer}
            nameOption: {format: int32, enum: [0, 1, 2], type: integer}
            customDesOption: {format: int32, enum: [0, 1, 2], type: integer}
            permanentType: {format: int32, enum: [0, 1], type: integer}
    PermanentListItemViewModel:
        type: object
        properties:
            code: {type: string}
            customDescriptionText: {type: string}
            isActive: {type: boolean}
            permanentType: {format: int32, enum: [0, 1], type: integer}
            amount: {format: int32, type: integer}
            defineAmountByUser: {type: boolean}
            itemIsActive: {type: boolean}
            itemIsAvailable: {type: boolean}
    ProductBuyerViewModel:
        type: object
        properties:
            amount: {format: int32, type: integer}
            fullName: {type: string}
            customDescription: {type: string}
            code: {type: string}
            phone: {type: string}
            email: {type: string}
            payDate: {format: date-time, type: string}
            amountDisplay: {type: string, readOnly: true}
            payDateDisplay: {type: string, readOnly: true}
            phoneVM: {type: string, readOnly: true}
    ProductCreateViewModel:
        required:
            - title
        type: object
        properties:
            title: {type: string}
            description: {type: string}
            amount: {format: int32, type: integer}
            defineAmountByUser: {type: boolean}
            quantity: {format: int32, type: integer}
            haveTax: {type: boolean}
            unlimited: {type: boolean}
            imageLink: {type: string}
    ProductEditViewModel:
        required:
            - title
            - amount
        type: object
        properties:
            code: {type: string}
            title: {type: string}
            description: {type: string}
            amount: {format: int32, type: integer}
            defineAmountByUser: {type: boolean}
            haveTax: {type: boolean}
            quantity: {format: int32, type: integer}
            unlimited: {type: boolean}
            imageLink: {type: string}
    ProductListItemViewModel:
        type: object
        properties:
            amount: {format: int32, type: integer}
            title: {type: string}
            code: {type: string}
            quantity: {format: int32, type: integer}
            unlimited: {type: boolean}
            defineAmountByUser: {type: boolean}
            amountDisplay: {type: string, readOnly: true}
            quantityVM: {type: string, readOnly: true}
            isActive: {type: boolean}
            haveTax: {type: boolean}
            havePerma: {type: boolean}
schemes:
 - https
securityDefinitions:
  Bearer:
    type: apiKey
    in: header
    name: Authorization
    description: "برای احراز هویت در سرویس‌های مختلف باید از توکن Bearer در header درخواست‌ها به صورت زیر استفاده کنید \n\n\n ساختار ارسال توکن: (Bearer TOKEN) \n\n\n 
    اگر شما یک اپلیکیشن و یا وب‌سایت شخصی دارید و قصد استفاده از سرویس‌های مالی ما را برای خود دارید می‌بایست از access token استفاده کنید،  جهت مطالعه روند دریافت آن از کنسول توسعه‌دهنده،   [لطفا اینجا کلیک نمایید.](https://help.payping.ir/fa/article/-1i7ly87/)"
  oauth2:
    type: oauth2
    flow: accessCode
    authorizationUrl: 'https://oauth.payping.ir/connect/authorize'
    tokenUrl: 'https://oauth.payping.ir/connect/token'
    description: "اما اگر وب‌سایت و اپلیکیشن شما قصد دسترسی به اطلاعات سایر کاربران پی‌پینگ را دارد، شما می‌بایست از سرویس OAuth ما استفاده کنید که به شما اجازه یک احراز هویت امن با استفاده از یک متد استاندارد و ساده به اپلیکیشن‌های وب، موبایل و دسکتاپ میدهد. جهت مطالعه روند اعطای دسترسی و روند کار [لطفا اینجا کلیک نمایید.](https://www.payping.io/help/fa/nhoh-driaft-tokn-oauth2/)"
    scopes:
      profile: دسترسی مرتبط با تمام اطلاعات یک کاربر
      email: دسترسی به مشاهده ایمیل
      nationalcode: دسترسی به مشاهده کدملی کاربر
      birthday: دسترسی به مشاهده تاریخ تولد کاربر
      shaba: دسترسی به مشاهده شبای بانکی کاربر
      phone: دسترسی به مشاهده شماره تماس کاربر
      pay:read: دسترسی فقط خواندنی در سرویس پرداخت
      pay:write: دسترسی نوشتن و تغییرات در سرویس پرداخت
      product:read: دسترسی فقط خواندنی در سرویس آیتم‌های مالی
      product:write: دسترسی نوشتن و تغییرات در سرویس آیتم‌های مالی
      customer:read: دسترسی فقط خواندنی به سرویس مشتریان
      customer:write: دسترسی نوشتن و تغییرات در سرویس مشتریان
      invoice:read: دسترسی فقط خواندنی به سرویس فاکتور ها
      invoice:write: دسترسی نوشتن و تغییرات در سرویس فاکتور ها
      upload.write: دسترسی مرتبط با سرویس بارگذاری فایل‌ها
security:
  - Bearer: []
  - oauth2: [
    profile,
    email,
    nationalcode,
    birthday,
    shaba,
    phone,
    pay:read,
    pay:write,
    product:read,
    product:write,
    customer:read, 
    customer:write,
    invoice:read, 
    invoice:write,
    upload.write]